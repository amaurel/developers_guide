[
["index.html", "App builder’s guide to Tercen Preface", " App builder’s guide to Tercen Tercen support document Preface This guide outlines how to design, develop and share apps for Tercen. Why read this guide? : Your curious or wish to build an app for Tercen then this is the guide. Acknowledgement: I would like to thank all the users for their feedback. It has helped us improve Tercen. Feedback: If you wish to give feedback then please do not hesitate to create an entry in the issue tracker. Motivation: Tercen promotes collaboration for data analysis. Not everyone can code or even wants to, but everyone should benefit from the explosion of data and code currently taking place. Tercen allows non programmers (e.g. biologists) to explore their data and allows programmers (e.g. bioinformaticians) to upload their code (or web-apps) for the biologist to use. By offering this services we believe biologist get empowered and can claim back control of their data. The bioinformatician gets liberated from the operational details and day to day analysis demands from the biologist. This is summed up with the phrase: Tercen empowers the biologist and liberates the bioinformatician. "],
["apps-types.html", "Chapter 1 Apps types", " Chapter 1 Apps types So you want to build an app, or just plain curious. The first question to ask oneself is which type of Tercen app would you like to build. There are three main types: Template app Workflow app Operator app A researcher wanting a complete workflow data analysis (e.g. RNA-seq, flow cyto, etc.) chooses one of the workflows expressed as a list of template apps. A template app therefore represents the highest level app because it defines a set of many steps in sequence to achieve the complete analysis. There would be a template app for each of the high-level workflow (e.g. RNA-seq, flow cyto, etc.). A researcher wanting a specific statistical process (e.g. quality control, two group analysis, or enrichment analysis, etc.) chooses from a list of workflow apps. A workflow app therefore represents the second highest level app because it defines a focused set of steps and visuals to achieve one particular statistical objective. A researcher wanting a specific operator function (e.g. scale, log, multiplication, addition and subtraction, etc.) chooses from a list of operator apps. An Operator app therefore represents a single computational step. In summary a research wishing a full end-to-end workflow chooses a template app, a specific data process chooses a workflow app, a specific computation chooses an operator app. Once an app is built, it may be added to the app-library where it can be accessed by researchers. Deciding on which to build is determined by what you would like the app to achieve. The first two, template and workflow, do not need programming experience, the operator does. Each has its own building process. Workflows and template apps are built and deployed within Tercen while an operator app is written using any number of programming languages (R, Python, Rust, etc.). The code is put on git hub for the app library to find. Currently Tercen has made a convenient R package for working with the Tercen API, we aim to quickly cover the other languages during our final release. The building of each app is explained in the following chapters. "],
["setting-up-the-environment.html", "Chapter 2 Setting up the environment Installing tercen-studio Starting tercen-studio Updating tercen-studio Configuration of .RProfile Uninstallation of tercen-studio Building tercen-studio", " Chapter 2 Setting up the environment If you wish to develop operators then you require to have a programming development environment. If you are a regular programmer then you already have your environment. For templates and workflow apps you do not need a development environment as Tercen contains all the features required to build them. Installing tercen-studio 1. Install docker-compose First you need to install docker-compose. For Windows: If you use Windows, you can install Docker-Desktop for Windows that includes docker-compose. Important: Make sure the Enable Hyper-V Windows Features option is selected on the Configuration page. Then, you need to activate shared drives: Right click on the running docker service and select “Settings” &gt; “Shared drives” Share the tercen_studio folder For Mac and Linux: Check out how to install docker-compose on Mac or Linux. 2. Clone tercen-studio repository Then, get tercen-studio by cloning the following repository: git clone https://github.com/tercen/tercen_studio.git cd tercen_studio Starting tercen-studio Once docker-compose is installed and the tercen-studio repository cloned, you can start tercen by running: docker-compose up -d You can run Tercen by going to http://127.0.0.1:5402. Username: admin Password: admin You can run RStudio by going to http://127.0.0.1:8787/. Username: rstudio Password: tercen Now you’re all set! Updating tercen-studio You can update tercen-studio by running: # stop tercen_studio docker-compose down # get tercen_studio latest version git pull docker-compose pull # start tercen_studio docker-compose up -d Configuration of .RProfile Content of .Rprofile: file in your home directory options(&quot;tercen.serviceUri&quot;=&quot;http://127.0.0.1:5400/api/v1/&quot;) options(&quot;tercen.username&quot;=&quot;XXXX&quot;) options(&quot;tercen.password&quot;=&quot;YYYY&quot;) where XXXX and YYYY are the appropriate username and password of the developer. Uninstallation of tercen-studio To uninstall tercen-studio, you need to run: docker-compose down # check tercen docker volumes names docker volume ls # delete tercen docker volumes docker volume rm tercen_studio_couchdb-data docker volume rm tercen_studio_tercen-data docker volume rm tercen_studio_tercen-studio-data docker volume rm tercen_studio_tercen-studio-renv Building tercen-studio If you need to build tercen-studio, run the following code: cd docker docker build -t tercen/tercen_studio:0.9.2.9 . docker history --no-trunc tercen_studio:0.9.2.9 docker push tercen/tercen_studio:0.9.2.9 "],
["building-a-template-app.html", "Chapter 3 Building a template app Notify the community", " Chapter 3 Building a template app The process for building a template app is: Design the template Create a workflow in Tercen Set the properties of the workflow to template Test it on input data Notify the community of its existence (see below) All the building and deployment steps are performed in Tercen. All template apps who are on a git repository are installable, only the git URL and a tag version number is required for a researcher to install it in Tercen. Notify the community Currently, we ask you to send an email to info@tercen.com containing the description and link to the workflow git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building a web entry point for researchers to browse all the apps offered by the community. "],
["building-a-workflow-app.html", "Chapter 4 Building a workflow app Notify the community", " Chapter 4 Building a workflow app The process for building a workflows app is: Design the workflow app Create a workflow app in Tercen Insert Wizard step (optional) Replace the initial Table step with Input step Add a final Output step Save it Go to the properties and set it as an app Test it in a workflow with data Notify the community of its existence (see below) All the building and deployment processes are performed in Tercen. All workflow apps who are on a git repository are installable, only the git URL and a tag version number is required for a researcher to install it in Tercen. Notify the community Currently, we ask you to send an email to info@tercen.com containing the description and link to the workflow app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community. "],
["building-an-r-operator-app.html", "Chapter 5 Building an R operator app Creating an operator app Notify the community R packrat", " Chapter 5 Building an R operator app Creating an operator app Tercen allows programmers to easily build new operators from the comfort of their favorite interactive development environment (IDE). From the IDE it is possible to access all Tercen features. The ability to access the input data (from Tercen) and returning results (to Tercen) is essential. The ability to create a new Tercen operator requires basic programming skills. Here is a development process to create an operator app: Design the operator: Creating the project: Open R Studio and create an empty project and init the git Copy four files into project, you can find them in any operator in tercen github. operator.json main.R README.md .gitignore Modify appropriately each of the files Create the workspace.R file by: Copy main.R and rename to workspace.R file Add the following lines to workspace.R file: source(&#39;~/.Rprofile&#39;) options(&quot;tercen.workflowId&quot;= &quot;76a4dcffd551802fd23d42bd862e8300&quot;) options(&quot;tercen.stepId&quot;= &quot;3-2&quot;) The values indicated above are examples. The real values come from the next section. Writing and testing the operator app: Develop and test the operator app within the workspace.R file Determine the input data for the operator app Start Tercen Use the browser to go to http://127.0.0.1:5400 Login Go to the workflow which contains the data Add a data step Configure a project view in cross-tab window of the data step Record the stepId and workflowId of this data step Get data using the tercen api tercen::ctx$select Execute the operator app locally Push results back to Tercen using the tercen API tercen::ctx$save The actions above may happen multiple times as you develop your operator. Once the operator app is finalized then proceed: Deploy the operator: Modify workshop.R and copy it to main.R Run packrat::init This can always re-init packrat by performing the following Remove the packrat folder in the Rstudio project folder Remove the .Rprofile file in the project folder Run packrat::init again upload to github in a public repository, let call it the operator git repo. The process steps for building a operator app using R: Design the operator Decide which existing operator to clone from Tercen app-library Clone an existing operator from the Tercen github Re-init the git Remove packrat Modify the code for operator Run it locally until satisfied Add some tests Add documentation Init the R packrat Create and push to a git repository Install it into Tercen from app-library Test it on data Notify the community it exists (see below) The building and deployment steps are performed in your development environment (e.g. R Studio) and Git hub. All the operators apps are version controlled. All operator apps who are on a git repository are installable, only the git URL and a tag version number is required for a researcher to install it in Tercen. Notify the community Currently, we ask you to send an email to info@tercen.com containing the description and link to the operators app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community. R packrat R operators require packages, especially the same version of packages you used when you developed. This package environment is managed by (packrat[https://rstudio.github.io/packrat/] system is used to manage package versions.. The ability to run an operator with exactly the same packages you used when you developed is essential for reproducible science. "],
["building-an-r-operator-app-walkthrough-example.html", "Chapter 6 Building an R operator app: walkthrough example Designing the operator Setting up the project Coding and testing the operator locally Documenting the operator Preparing some unit testing Deploying the operator", " Chapter 6 Building an R operator app: walkthrough example Here we will learn through a concrete example how to create an R operator for Tercen. Our goal is to create an operator performing a linear regression on our input data and returning the slope and intercept of the model. Designing the operator The first step is to define our input projection and output relation. In Tercen, each operator shall take as input a table and return a table. Remember: “Table in, table out!” Here we want to perform the linear regression of the values projected on the y axis against the values projected on the x axis, per cell. In this example, we will output only the intercept and the slope of the model, per cell. The operator model can be seen as follow: Setting up the project Make sure that tercen-studio is properly set up and that both Tercen and RStudio run locally (respectively on http://127.0.0.1:5402 and http://127.0.0.1:8787/). Otherwise, please refer to Chapter 2. 1. Create a GitHub repository from a template Create a new GitHub repository with your own account based on the Tercen R operator template (https://github.com/tercen/templateR_operator). Click on the green button Use this template in the Tercen template repository. Then you can create your own repository based on this template. Choose an explicit name (here, lm_operator). Now that the repository is initiated in your GitHub account, go back to RStudio Server (http://127.0.0.1:8787/). Create a new project by clicking on File &gt; New project &gt; Version control &gt; Git. You will be asked the URL of the repository (put the newly created one) and a name for the project. Now, your local project should include the skeleton: main.R: main operator script workspace.R: local testing script operator.json: operator metadata README_template.md: operator documentation template doc directory: includes a dev_commands.md file, which contains useful development command lines. 2. Set up the Tercen input projection In this example, We will use the khan dataset (available on https://github.com/tercen/khan_data). First, we start Tercen locally (http://127.0.0.1:5402) and set up a pairwise projection of the measurement in different tissues. The data step of interest should look as follow: Note that the data step URL includes this pattern: /w/WORKFLOWID/ds/DATASTEPID, where WORKFLOWID and DATASTEPID are unique workflow and data step identifiers, respectively. These identifiers will be used in the next step within RStudio to get data from this data step. Coding and testing the operator locally Now that our RStudio project and Tercen projection are set up, we can code and test our operator locally as follow: Open workspace.R Replace the data step and workflow IDs taken from the Tercen data step URL in workspace.R: library(tercen) library(dplyr) options(&quot;tercen.workflowId&quot; = &quot;WORKFLOWID&quot;) options(&quot;tercen.stepId&quot; = &quot;DATASTEPID&quot;) Code your operator. Here, we implement a function do.lm() that performs a linear regression on the input data frame and return the slope and intercept of the model. do.lm &lt;- function(df) { out &lt;- data.frame( .ri = df$.ri[1], .ci = df$.ci[1], intercept = NaN, slope = NaN ) mod &lt;- try(lm(.y ~ .x, data = df)) if(!inherits(mod, &#39;try-error&#39;)) { out$intercept &lt;- mod$coefficients[1] out$slope &lt;- mod$coefficients[2] } return(out) } ctx &lt;- tercenCtx() %&gt;% # Get data from the data step select(.x, .y, .ri, .ci) %&gt;% # select variables of interest group_by(.ri, .ci) %&gt;% # group by row and column (&quot;per cell&quot;) do(do.lm(.)) %&gt;% # do the linear model ctx$addNamespace() %&gt;% # add namespace ctx$save() # push results back to Tercen using the API Execute the code and check the results in Tercen Note that we recommend to implement the following sanity checks when creating an operator: check the presence of expected inputs (here, x and y axes) use the try() function to test the main function implemented (here, lm()) Documenting the operator Edit the README.md to describe the operator design and usage. The documentation should contain: A general description of the operator A description of the input projections A description of the output relations For example, here is how the lm operator documentation looks: Description The lm operator performs a linear regression in Tercen. Usage Input projection y-axis measurement value x-axis explanatory value Output relations intercept numeric, intercept of the linear regression, per cell slope numeric, slope of the linear regression, per cell Details The lm operator performs a linear regression on each cell and returns the slope and intercept of the model. Preparing some unit testing It’s always good to prepare some unit tests that could be ran when a new version of Tercen is released. To include a test, you need to create a test subdirectory in your project directory. It must include: a test input file an expected output file a JSON file containing information about the test For example, a test for our lm operator can be created as follow: # Simulate tercen input based on the CO2 dataset # with an x and y-axis, rows and columns data(CO2) df &lt;- data.frame(.x = CO2$conc, .y = CO2$uptake, .ri = CO2$Plant, .ci = CO2$Treatment) # Run the do.lm() function created above to generate the expected output out &lt;- df %&gt;% select(.ci, .ri, .x, .y) %&gt;% group_by(.ri, .ci) %&gt;% do(do.lm(.)) # write input and expected output in the test subdirectory write.csv(CO2, file=&quot;./test/CO2.csv&quot;, row.names = FALSE, quote = FALSE) write.csv(out, file=&quot;./test/output.csv&quot;, row.names = FALSE, quote = FALSE) Now that we have our input and ouput files, we can create the JSON file that shall include the following information: { &quot;kind&quot;: &quot;OperatorUnitTest&quot;, &quot;name&quot;: &quot;testlm1&quot;, &quot;namespace&quot;: &quot;test&quot;, &quot;inputDataUri&quot;: &quot;CO2.csv&quot;, &quot;outputDataUri&quot;: [&quot;output.csv&quot;], &quot;columns&quot;: [&quot;Treatment&quot;], &quot;rows&quot;: [&quot;Plant&quot;], &quot;colors&quot;: [], &quot;labels&quot;: [], &quot;yAxis&quot;: &quot;uptake&quot;, &quot;xAxis&quot;: &quot;conc&quot; } The name attribute is free. Input and output test files names must be assigned to the inputDataUri and inputDataUri, respectively. Variable names of the input file must be assigned to the columns, rows, colors, labels, yAxis, xAxis attributes. In our case, colors and labels are left empty as they are not part of our input. Deploying the operator 1. Copy the code to the main.R script Once you are confident enough that your operator is working after testing it locally, you can copy the code to the main.R file. Make sure not to include the options() calls that are only needed during the local development step: # The following lines shall not be included into main.R: options(&quot;tercen.workflowId&quot; = &quot;wwww&quot;) options(&quot;tercen.stepId&quot; = &quot;dddd&quot;) getOption(&quot;tercen.workflowId&quot;) getOption(&quot;tercen.stepId&quot;) 2. Initiate renv The ability to run an operator with exactly the same packages you used when you developed is essential for reproducible science. In order to ensure reproducibility, you can associate packages and their versions to your operator by using the init() function of the renv package: renv::init() This will initiate a project-local environment with a private R library in the renv subdirectory. 3. Push it to your GitHub repository Once everything is ready, you simply need to push all the modifications to the GitHub repository that you created before. If you want to install it directly from Tercen, you will need to create a release in GitHub. 4. Notify community Currently, we ask you to send an email to info@tercen.com containing the description and link to the operators app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community. "],
["tercen-app-library.html", "Chapter 7 Tercen app library", " Chapter 7 Tercen app library The Tercen app library is managed by a json file. Currently Tercen support is the only authorized to modify it. Anyone can request an app be added to the Tercen app library. Here are the steps for adding it to Tercen app library: Notify Tercen support (info@tercen.om) regarding your wish to add it to app-library Tercen support tests the app Tercen support modifies the app-library repository (publish) Tercen support send email to indicate it is available "],
["known-issues.html", "Chapter 8 Known issues", " Chapter 8 Known issues The beta version of Tercen has the following known issues and limitations: In the Tercen applibrary, the apps currently do not use the category concept These issues are solved in the final version scheduled to go live after summer. "],
["next-steps.html", "Chapter 9 Next steps", " Chapter 9 Next steps Here are some ideas: Try to code for different operators using the teRcen R package, Note when using R Studio it will auto-complete when you type the methods on the Tercen client and tercen query object. Give feedback on this app builder’s guide by creating an issue Read the online Tercen Book Give feedback on Tercen by sending an email to info@tercen.com Contact us for a one-2-one session "],
["glossary.html", "Chapter 10 Glossary", " Chapter 10 Glossary Measurement: A numerical variable Observation: An observation is the factor name given to a value (measurement), at a particular period, of a particular variable. Variable: A variable is a characteristic of a unit being observed that may assume more than one of a set of values to which a numerical measure or a category from a classification can be assigned (e.g. income, age, weight, etc., and “occupation”, “industry”, “disease”, etc Table: Cross-tab window: Projection: Long format: Wide format: "]
]

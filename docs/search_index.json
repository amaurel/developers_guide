[["index.html", "App builders guide to Tercen Preface", " App builders guide to Tercen Tercen support document Preface This guide outlines how to design, develop and share apps for Tercen. Why read this guide? : Your curious or wish to build an app for Tercen then this is the guide. Acknowledgement: I would like to thank all the users for their feedback. It has helped us improve Tercen. Feedback: If you wish to give feedback then please do not hesitate to create an entry in the issue tracker. Motivation: Tercen promotes collaboration for data analysis. Not everyone can code or even wants to, but everyone should benefit from the explosion of data and code currently taking place. Tercen allows non programmers (e.g. biologists) to explore their data and allows programmers (e.g. bioinformaticians) to upload their code (or web-apps) for the biologist to use. By offering this services we believe biologist get empowered and can claim back control of their data. The bioinformatician gets liberated from the operational details and day to day analysis demands from the biologist. This is summed up with the phrase: Tercen empowers the biologist and liberates the bioinformatician. "],["welcome.html", "Chapter 1 Welcome", " Chapter 1 Welcome Discover all the incredible capabilities of our platform so that you can build useful and exciting apps directly on top of Tercen with ease - whether youre public apps, or youre building for your own teams private apps. See what others have built on Tercen, chat with developers in our Community, and explore our documentation to get a sense of what you can do. Checkout Tercen Github for some apps Checkout Tercen Explore section to see some projects using cool apps. The building of apps is explained in the following chapters. "],["guidelines.html", "Chapter 2 Guidelines Legal text", " Chapter 2 Guidelines We want developers to have a great experience building on the Tercen Platform. We believe that building a vibrant developer ecosystem around Tercen benefits everyone involved, and helps our mission to make data analysis accessible to a wider community. Weve written these guidelines for anyone using Tercens products and services, to show you how to use Tercen and our APIs, and to share best practices as we, and you, continue to build new and exciting products and services. But, like everything in life, there have to be some rules of engagement which is why weve drawn up these developer guidelines. Yes, theyre written in legal terms, to protect us and you, but weve tried to ensure they are as simple as possible. We want to point you towards opportunities rather than focusing on what cant be done. These guidelines sit alongside, and are in addition to our Terms of Service and Privacy Policy so please do make sure youve read and understand these documents. If we feel you are misusing our products or services, we reserve the right to withdraw access to our products and services entirely. Legal text Before starting work, well ask you to confirm that youre happy to comply with the spirit and the letter of these guidelines. Please use Tercens products and services responsibly. Our products, services and our brand are really important to us, and we ask that you do not do anything that might damage them. We expect data produced with Tercens products to be represented transparently and honestly. Dont misrepresent data or metrics created by our products. We expect you to use our products and services to help serve your customers. Dont re-sell, re-purpose or license, any data obtained from Tercen. Dont use our products to create a service that competes with Tercen or infringes our copyright. Keeping our customers data secure is the most important thing that Tercen does. Dont use spiders, robots crawlers, data mining or similar tools to scrape the Tercen Website or APIs. Tercen needs access to monitor your access to our API so dont block us from doing so. Respect our rate-limits. Dont overuse our APIs or resources  we expect you to comply with any fair usage guidelines we publish from time to time. If you have an idea as to how our products can be improved or you would like to try something experimental then please let us know and wed be happy to discuss with you. You can use our logo and branding where you have the right to do so, but please dont do anything that could damage our brand integrity or be misleading or confusing to customers - that includes using our logo in any part of your logo, using the Tercen name in your app name or anything else that could be considered an abuse of our branding, logos or copyrighted materials. Treat your customers and their data responsibly. Keeping our customers data secure is the most important thing that Tercen does. We go to considerable lengths to ensure that all data sent to Tercen is handled securely. We expect others with access to our customers data to treat it with the same level of trust and responsibility. Our terms for developers include: You must have appropriate measures in place to protect any information you receive from Tercen against unauthorized access, use, or disclosure. You must only use the data you need to build your product or service. You must have an end user agreement and a privacy policy in place with respect to each of your customers - and it must be compatible with Tercens terms. You must ensure youre meeting all your legal obligations in terms of applicable data protection and consumer protection; dont use Tercens products in connection with data you dont have permission to process. You must be able to meet the requirements of the European Unions General Data Protection Regulation (GDPR) for any data you process which falls within the scope of the legislation and fulfill subject access requests as required. In addition to breach notifications required under GDPR, youll notify Tercen of any personal data breaches within 72 hours of becoming aware of a breach. You must grant Tercen permission to audit your data processing activities. This can include independently produced audit reports. As our developer platform and business evolves, so too will these guidelines. Wed love for you to get in touch if youve any feedback or suggestions for how we can make them better. We know that occasionally things can go wrong and mistakes can be made. If at any time you are concerned that these guidelines may have been breached, please do notify us as soon as you become aware. These guidelines may change over time, so do come back and check periodically. Thanks for reading this far - were excited to see what youll build! "],["apps-types.html", "Chapter 3 Apps types Template app Workflow app Operator app", " Chapter 3 Apps types So you want to build an app, or just plain curious. The first question to ask oneself is which type of Tercen app would you like to build. There are three main types: Template app Workflow app Operator app A researcher wanting a complete workflow data analysis (e.g. RNA-seq, flow cyto, etc.) chooses one of the workflows expressed as a list of template apps. A template app therefore represents the highest level app because it defines a set of many steps in sequence to achieve the complete analysis. There would be a template app for each of the high-level workflow (e.g. RNA-seq, flow cyto, etc.). A researcher wanting a specific statistical process (e.g. quality control, two group analysis, or enrichment analysis, etc.) chooses from a list of workflow apps. A workflow app therefore represents the second highest level app because it defines a focused set of steps and visuals to achieve one particular statistical objective. A researcher wanting a specific operator function (e.g. scale, log, multiplication, addition and subtraction, etc.) chooses from a list of operator apps. An Operator app therefore represents a single computational step. It is a typically a single R or Python function. In summary a research wishing a full end-to-end workflow chooses a template app, a specific data process chooses a workflow app, a specific computation chooses an operator app. Once an app is built, it may be added to the app-library where it can be accessed by researchers. Deciding on which to build is determined by what you would like the app to achieve. The first two, template and workflow, do not need programming experience, the operator does. The building of each app is explained in the following chapters. Template app No programming knowledge is required to build a template app. These are built by using the Tercen user interface and deployed within Tercen Workflow app No programming knowledge is required to build a workflow app. These are built by using the Tercen user interface and deployed within Tercen Operator app Programming knowledge is required to build an operator app using any number of programming languages (R, Python, Rust, etc.). The code is put on git hub for the app library to find. Currently Tercen has made a convenient R package for working with the Tercen API, we aim to quickly cater for the other programming languages (Python, Matlab etc.) during our final release. A command line function can also be deployed as an operator app. This is done using a docker concept. "],["setting-up-tercen-studio.html", "Chapter 4 Setting up Tercen Studio Installing Tercen Studio Starting Tercen Studio", " Chapter 4 Setting up Tercen Studio If you wish to develop operators then you require to have a programming development environment. If you are a regular programmer then you already have your environment. For templates and workflow apps you do not need a development environment as Tercen contains all the features required to build them. Installing Tercen Studio 1. Install docker-compose First you need to install docker-compose. For Windows: If you use Windows, you can install Docker-Desktop for Windows that includes docker-compose. Advise: Select the WSL 2 backend system option when installing on Windows. For Mac and Linux: Check out how to install docker-compose on Mac or Linux. 2. Clone tercen-studio repository Then, get tercen-studio by cloning the following repository: git clone https://github.com/tercen/tercen_studio.git cd tercen_studio Starting Tercen Studio Once docker-compose is installed and the tercen-studio repository cloned, you can start tercen by running: docker-compose up -d You can run Tercen by going to http://127.0.0.1:5402. Username: admin Password: admin You can run RStudio by going to http://127.0.0.1:8787/. Username: rstudio Password: tercen Now youre all set! "],["building-a-template-app.html", "Chapter 5 Building a template app Notify the community", " Chapter 5 Building a template app A template workflow is perfect for users who wish to have a complete workflow to perform a complete analysis. The building of a template app does not require any programming. The process for building a template app is: Design the template Create a workflow in Tercen Test it on input data Create a template folder in the project Move the workflow into the template folder Download the template from the project Create a github and upload template Tag the github Notify the community of its existence (see below) All the building and deployment steps are performed in Tercen. All template apps who are on a git repository are installable, only the git URL and a tag version number is required for a researcher to install it in Tercen. Notify the community Currently, we ask you to send an email to support@tercen.com containing the description and link to the workflow git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building a web entry point for researchers to browse all the apps offered by the community. "],["building-a-workflow-app.html", "Chapter 6 Building a workflow app Notify the community", " Chapter 6 Building a workflow app A workflow app is perfect for users who wish tot have a focused module of analysis with multiple operators and views (e.g. PCA) The building of a workflow app does not require any programming. The process for building a workflow app is: Design the workflow app Create a workflow app in Tercen Insert Wizard step (optional) Replace the initial Table step with Input step Add a final Output step Save it Create an app folder in the project area Move the workflow to this app folder Test it in a workflow with data Download the workflow Create a github repository Upload the workflow app Tag the repository Notify the community of its existence (see below) All the building and deployment processes are performed in Tercen. All workflow apps who are on a git repository are installable, only the git URL and a tag version number is required for a researcher to install it in Tercen. Notify the community Currently, we ask you to send an email to support@tercen.com containing the description and link to the workflow app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community. "],["building-an-operator-app.html", "Chapter 7 Building an operator app Design the operator Set up a GitHub project Setup the input data Connecting to tercen Managing input parameters Managing R packages Deploy!", " Chapter 7 Building an operator app Lets go through a general approach to create an R operator for Tercen. A more detailed walk through (a tutorial) example is outlined in the next chapter where a linear regression operator is built from scratch. Building an operator requires the following sequential steps: Design the operator Setup the github repository Setup the input projection Connecting to Tercen Testing Managing input parameters Managing R packages Deploy Design the operator The first step is to define our input projection and output relation. In Tercen, each operator shall take as input a table and return a table. Remember: Table in, table out! To understand the input table and the output table. The input table is defined by the data input projection in Tercen and output table is what is computed by the operator. The output table (also called the computed table) is related to the input table by an output relation. The input project is the projection in the data step which is used by the operator. For example a projection is composed of the y-axis, x-axis, row, col, color, label. This input project determines what is the structure of the data which is given to the operator. An operator which computes a simple mean would use a y-axis, row, col projection. This allows the mean to be computed per cell. A linear regression operator like lm might use a projection with y-axis, x-axis, and row, col. This allows the lm to be computed per cell. The output relation is the relation of the calculated output to the input values. For example: Is the relation per Cell? Is the relation per Col? Is the relation per Row? Is the relation for All the data? Per Cell example : Lets say the operator used a projection with row and col and the operator calculates a mean which is computed for each cell (i.e. per row/col), this would be a per cell relationship. Per Col example: Lets say the operator used a project with row and col and the operator performed a clustering on the columns, this would be a column relationship. for All data example: Lets say the operator used a project with row and col and the operator calculated a total mean of all the data (i.e. across all rows and cols), this would be an all data relationship. Steps for designing the operator Understand the Tercen concepts Look at existing operators Decide what input projection Decide waht output relation Set up a GitHub project All operators currently are developed on github. It is necessary to have a github account. Each operator is implemented as a separate repository therefore you require to create a repository for your operator. The quickest method is the use the template feature in github, where, at the moment of repository creation you can choose to use a template, currently we have the following templates available: template for r operators template for shiny r operators template for docker operators template for python operators It is important to choose a good name for your operator repository, see 13 Steps for starting with the operator repository Get github account Choose an operator name Create an operator repository on github based on a template (see above) Clone the repo into the local Rstudio contained in tercen studio Setup the input data This can be done in the local or a cloud instance of Tercen. Login to Tercen (either local or cloud) Prepare your data by defining a cross-tab projection using a data step. Note that the project in the data step has URL with this pattern: /w/workflowId/ds/stepId, where workflowId and stepId are unique workflow and data step identifiers, respectively. These identifiers will be used in the next step to get data from this data step. Connecting to tercen Once you have cloned the github operator project into your local RStudio and you have setup the Tercen data projection, we can code and test our operator locally. If you wish to test with the local version of Tercen, then you do not require to set the tercen.service system variable. Load some data up in the Each data step has a uniqueworkflowId and a stepId combination. options(&quot;tercen.workflowId&quot;= &quot;8a8845f6a5eeff27ce33fd382444de88&quot;) options(&quot;tercen.stepId&quot;= &quot;5191724b-3963-4e34-af58-7977cc61e5b1&quot;) Connecting to tercen cloud Additional system variable are required in order to connect to a data step in the tercen cloud. options(&quot;tercen.serviceUri&quot;= &quot;https://tercen.com/api/v1/&quot;) options(&quot;tercen.username&quot;= &quot;uuuu&quot;) options(&quot;tercen.password&quot;= &quot;pppp&quot;) Where uuuu is the username and pppp is the password, these are specific to your username and password. Managing input parameters The operator has a file called operator.json these define the parameters which the user can set when using your operator. Before deploying, please think what parameters are required and modify this file. Managing R packages The newly created operators requires the correct packages to be loaded. Install the packages your require using the standard install procedures, we recommend the following: install.packages() remotes::install_github() Just before you deploy your operator, it is necessary to setup the package management system. A Tercen operator manages its packages using the renv system. The renv system allows all the packages you required to be recorded in a renv.lock file. To generate this use: renv::init() This is done before you push the repository to github. Deploy! Once you are satisfied with your operator, you can release it. Document the operator Edit the README.md to describe the operator design and usage. The documentation should contain: A general description of the operator A description of the input projections A description of the output relations Prepare operator testing Its always good to prepare some unit tests that could be ran when a new version of Tercen is released. To include a test, you need to create a test subdirectory in your project directory. It must include: a test input file an expected output file a JSON file containing information about the test Initiate package version control The ability to run an operator with exactly the same packages you used when you developed is essential for reproducible science. In order to ensure reproducibility, you can associate packages and their versions to your operator by initiating a project-local environment with a private libraries in a subdirectory. Push it to your GitHub repository Once everything is ready, you simply need to push all the modifications to the GitHub repository that you created before. If you want to install it directly from Tercen, you will need to create a release in GitHub. All the operators apps are version controlled. All operator apps who are on a git repository are installable, only the git URL and a tag version number is required for a researcher to install it in Tercen. Notify community Currently, we ask you to send an email to support@tercen.com containing the description and link to the operators app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community. "],["tutorial-dev-of-an-r-operator-app.html", "Chapter 8 Tutorial: Dev of an R operator app Designing the operator Setting up the project Develope the operator locally", " Chapter 8 Tutorial: Dev of an R operator app Here we will learn through a concrete example how to create an R operator for Tercen. Our goal is to create an operator performing a linear regression on our input data and returning the slope and intercept of the model. Designing the operator The first step is to define our input projection and output relation. In Tercen, each operator shall take as input a table and return a table. Remember: Table in, table out! Here we want to perform the linear regression of the values projected on the y axis against the values projected on the x axis, per cell. In this example, we will output only the intercept and the slope of the model, per cell. The operator model can be seen as follow: Setting up the project Make sure that tercen-studio is properly set up and that both Tercen and RStudio run locally (respectively on http://127.0.0.1:5402 and http://127.0.0.1:8787/). Otherwise, please refer to Chapter 2. 1. Create a GitHub repository from a template Create a new GitHub repository with your own account based on the Tercen R operator template (https://github.com/tercen/templateR_operator). Click on the green button Use this template in the Tercen template repository. Then you can create your own repository based on this template. Choose an explicit name (here, lm_operator). Now that the repository is initiated in your GitHub account, go back to RStudio Server (http://127.0.0.1:8787/). Create a new project by clicking on File &gt; New project &gt; Version control &gt; Git. You will be asked the URL of the repository (put the newly created one) and a name for the project. Now, your local project should include the skeleton: main.R: main operator script workspace.R: local testing script operator.json: operator metadata README_template.md: operator documentation template doc directory: includes a dev_commands.md file, which contains useful development command lines. 2. Set up the Tercen input projection In this example, We will use the khan dataset (available on https://github.com/tercen/khan_data). First, we start Tercen locally (http://127.0.0.1:5402) and set up a pairwise projection of the measurement in different tissues. The data step of interest should look as follow: Note that the data step URL includes this pattern: /w/WORKF+LOWID/ds/DATASTEPID, where WORKFLOWID and DATASTEPID are unique workflow and data step identifiers, respectively. These identifiers will be used in the next step within RStudio to get data from this data step. Develope the operator locally Now that our RStudio project and Tercen projection are set up, we can code and test our operator locally as follow: Open workspace.R Replace the data step and workflow IDs taken from the Tercen data step URL in workspace.R: library(tercen) library(dplyr) options(&quot;tercen.workflowId&quot; = &quot;WORKFLOWID&quot;) options(&quot;tercen.stepId&quot; = &quot;DATASTEPID&quot;) Code your operator. Here, we implement a function do.lm() that performs a linear regression on the input data frame and return the slope and intercept of the model. do.lm &lt;- function(df) { out &lt;- data.frame( .ri = df$.ri[1], .ci = df$.ci[1], intercept = NaN, slope = NaN ) mod &lt;- lm(.y ~ .x, data = df) out$intercept &lt;- mod$coefficients[1] out$slope &lt;- mod$coefficients[2] return(out) } ctx &lt;- tercenCtx() %&gt;% # Get data from the data step select(.x, .y, .ri, .ci) %&gt;% # select variables of interest group_by(.ri, .ci) %&gt;% # group by row and column (&quot;per cell&quot;) do(do.lm(.)) %&gt;% # do the linear model ctx$addNamespace() %&gt;% # add namespace ctx$save() # push results back to Tercen using the API Execute the code and check the results in Tercen Note that we recommend to implement the following sanity checks when creating an operator: check the presence of expected inputs (here, x and y axes) use the try() function to test the main function implemented (here, lm()) "],["deploying-an-r-operator-app.html", "Chapter 9 Deploying an R operator app Documenting the operator Deploy!", " Chapter 9 Deploying an R operator app Now that we have a working R operator for Tercen, we want to deploy it! We will now document, prepare tests and release our linear regression operator. Documenting the operator Edit the README.md to describe the operator design and usage. The documentation should contain: A general description of the operator A description of the input projections A description of the output relations For example, here is how the lm operator documentation looks: Description The lm operator performs a linear regression in Tercen. Usage Input projection y-axis measurement value x-axis explanatory value Output relations intercept numeric, intercept of the linear regression, per cell slope numeric, slope of the linear regression, per cell Details The lm operator performs a linear regression on each cell and returns the slope and intercept of the model. Deploy! 1. Copy the code to the main.R script Once you are confident enough that your operator is working after testing it locally, you can copy the code to the main.R file. Make sure not to include the options() calls that are only needed during the local development step: # The following lines shall not be included into main.R: options(&quot;tercen.workflowId&quot; = &quot;wwww&quot;) options(&quot;tercen.stepId&quot; = &quot;dddd&quot;) getOption(&quot;tercen.workflowId&quot;) getOption(&quot;tercen.stepId&quot;) 2. Initiate renv The ability to run an operator with exactly the same packages you used when you developed is essential for reproducible science. In order to ensure reproducibility, you can associate packages and their versions to your operator by using the init() function of the renv package: renv::init() This will initiate a project-local environment with a private R library in the renv subdirectory. 3. Push it to your GitHub repository Once everything is ready, you simply need to push all the modifications to the GitHub repository that you created before. If you want to install it directly from Tercen, you will need to create a release in GitHub. 4. Notify community Currently, we ask you to send an email to support@tercen.com containing the description and link to the operators app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community. "],["improving-an-r-operator-app.html", "Chapter 10 Improving an R operator app Error catching Adding properties Preparing operator testing", " Chapter 10 Improving an R operator app Now that we have deployed our R operator for Tercen, we can always improve it! In this chapter we will see how to catch errors, add input parameters (properties), and prepare testing for our linear regression operator. Error catching 1. Check the presence of input projection For the lm_operator, we can check if both x and y axes have been set in the projection, and return an error message to help the user. We can do that using the try() function. ctx &lt;- tercenCtx() if(inherits(try(ctx$select(&quot;.x&quot;)), &#39;try-error&#39;)) stop(&quot;x axis is missing.&quot;) if(inherits(try(ctx$select(&quot;.y&quot;)), &#39;try-error&#39;)) stop(&quot;y axis is missing.&quot;) 2. Catch errors in key processes We can also use the try() function to catch potential errors in key processes of our operator. In our example, we can for example catch error occuring while running the lm() function. Then, we return coefficients only if the model ran successfully. Otherwise, NaN are returned. do.lm &lt;- function(df) { out &lt;- data.frame( .ri = df$.ri[1], .ci = df$.ci[1], intercept = NaN, slope = NaN ) mod &lt;- try(lm(.y ~ .x, data = df)) # try-catch if(!inherits(mod, &#39;try-error&#39;)) { # get coefficients if lm ran succesfully out$intercept &lt;- mod$coefficients[1] out$slope &lt;- mod$coefficients[2] } return(out) } Adding properties Tercen operators can take input parameters (called properties). They can be of different types (boolean, enumerated, numeric). As an example, lets see how to add a property to the lm_operator. We will add a parameter to decide whether to omit the intercept in the model or not. 1. Modify the operators JSON file to add properties. For each property, we have to set values to different attributes: kind: property kind (BooleanProperty, DoubleProperty, or EnumeratedProperty) name: name that will be displayed in Tercen defaultValue: default value taken by the property description: description to be displayed in Tercen In our case, the JSON file looks now like this: { &quot;name&quot;: &quot;Linear regression&quot;, &quot;description&quot;: &quot;Returns the intercept and slope of a linear regression in a cell&quot;, &quot;tags&quot;: [&quot;linear model&quot;], &quot;authors&quot;: [&quot;tercen&quot;], &quot;urls&quot;: [&quot;https://github.com/agouy/lm_operator&quot;], &quot;properties&quot;: [ { &quot;kind&quot;: &quot;BooleanProperty&quot;, &quot;name&quot;: &quot;intercept.omit&quot;, &quot;defaultValue&quot;: false, &quot;description&quot;: &quot;A logical value indicating whether the intercept should be omitted in the model.&quot; } ] } 2. Use the property in the R code This property can be called in the R operator code as follows: intercept.omit &lt;- as.logical(ctx$op.value(&#39;intercept.omit&#39;)) if(intercept.omit) { mod &lt;- try(lm(.y ~ .x - 1, data = df)) } else { mod &lt;- try(lm(.y ~ .x, data = df)) } Preparing operator testing Its always good to prepare some tests that could be ran when a new version of Tercen is released. To include a test, you need to create a test subdirectory in your project directory. It must include: a test input file an expected output file a JSON file containing information about the test For example, a test for our lm operator can be created as follow: # Simulate tercen input based on the CO2 dataset # with an x and y-axis, rows and columns data(CO2) df &lt;- data.frame(.x = CO2$conc, .y = CO2$uptake, .ri = CO2$Plant, .ci = CO2$Treatment) # Run the do.lm() function created above to generate the expected output out &lt;- df %&gt;% select(.ci, .ri, .x, .y) %&gt;% group_by(.ri, .ci) %&gt;% do(do.lm(.)) # write input and expected output in the test subdirectory write.csv(CO2, file=&quot;./test/CO2.csv&quot;, row.names = FALSE, quote = FALSE) write.csv(out, file=&quot;./test/output.csv&quot;, row.names = FALSE, quote = FALSE) Now that we have our input and ouput files, we can create the JSON file that shall include the following information: { &quot;kind&quot;: &quot;OperatorUnitTest&quot;, &quot;name&quot;: &quot;testlm1&quot;, &quot;namespace&quot;: &quot;test&quot;, &quot;inputDataUri&quot;: &quot;CO2.csv&quot;, &quot;outputDataUri&quot;: [&quot;output.csv&quot;], &quot;columns&quot;: [&quot;Treatment&quot;], &quot;rows&quot;: [&quot;Plant&quot;], &quot;colors&quot;: [], &quot;labels&quot;: [], &quot;yAxis&quot;: &quot;uptake&quot;, &quot;xAxis&quot;: &quot;conc&quot; } The name attribute is free. Input and output test files names must be assigned to the inputDataUri and inputDataUri, respectively. Variable names of the input file must be assigned to the columns, rows, colors, labels, yAxis, xAxis attributes. In our case, colors and labels are left empty as they are not part of our input. "],["creating-a-shiny-operator-app.html", "Chapter 11 Creating a shiny operator app", " Chapter 11 Creating a shiny operator app It is easy to create a shiny operator. It is exactly like the creating a standard operator but it uses a the shiny framework. An example of a simple shiny is found at: https://github.com/tercen/heatmap_shiny_operator In Tercen, a shiny app can be in three modes, these modes reflect the three states of a shiny operator. show run showResult The first mode show is when the initial mode when an shiny operator is added to the cross-tab view. The second mode run is when the shiny has been executed. The third mode showResult is when the results of the an executed shiny is presented. For example, the result maybe a new graph based on a computation performed during the run. A good example of all three modes go to https://github.com/tercen/shiny_operator2 "],["creating-a-docker-operator-app.html", "Chapter 12 Creating a docker operator app Create the R operator locally Create the docker operator Build and push docker image Running docker operators locally Integrating any code (e.g. C++)", " Chapter 12 Creating a docker operator app Some R packages require additional system libraries that might not be installed in the Tercen environment. We can install them locally, but a problem persists: How to tell Tercen to install these dependencies when installing an operator? A solution is to create a docker container with our environment. If you are not familiar with Docker, it is highly recommended that you read the Get started with Docker guide. Create the R operator locally As an example, we will use the worldmap Tercen operator. It requires the R package sf, commonly used to plot maps. This package requires an external system dependency, GDAL, depending itself on UDUNIT2. You will not be able to install this R package if you dont have these dependencies installed on the system. To install the package in Tercen Studio, we simply need to run this command in the terminal: apt-get -y update &amp;&amp; apt-get install -y libudunits2-dev libgdal-dev Once the operator is running locally (see section Running docker operators locally), we can prepare the docker operator. Create the docker operator First, create a second GitHub repository that will hold the code used to build the image: A template for a Shiny Docker operator can be found here: https://github.com/tercen/shiny_docker_operator The worldmap docker operator can be found here: https://github.com/tercen/shiny_worldmap_docker_operator It contains different files: Dockerfile: instructions to build the Docker container README.md: to document the operator operator.json: start.R: internal, should not be modified. For the worldmap operator, the Dockerfile look like this: FROM tercen/dartrusttidy:1.0.7 USER root WORKDIR /operator RUN apt-get update RUN apt-get install -y libudunits2-dev RUN apt-get update RUN apt-get install -y libgdal-dev RUN git clone https://github.com/tercen/shiny_worldmap_operator.git WORKDIR /operator/shiny_worldmap_operator RUN echo 0.0.5 &amp;&amp; git pull RUN git checkout 0.0.5 RUN R -e &quot;renv::restore(confirm=FALSE)&quot; ENV TERCEN_SERVICE_URI https://tercen.com COPY start.R /start.R ENTRYPOINT [ &quot;R&quot;,&quot;--no-save&quot;,&quot;--no-restore&quot;,&quot;--no-environ&quot;,&quot;--slave&quot;,&quot;-f&quot;,&quot;/start.R&quot;] From the template, we need to: indicate the git repository containing the R operator (here, https://github.com/tercen/shiny_worldmap_operator.git) modify the working directory (/operator/shiny_worldmap_operator, based on the GitHub repository name) modify the tag (here, 0.0.5) add the commands to install our dependencies: RUN apt-get update RUN apt-get install -y libudunits2-dev RUN apt-get update RUN apt-get install -y libgdal-dev Finally, we need to modify the operator.json docker operator file. { &quot;name&quot;: &quot;Worldmap&quot;, &quot;description&quot;: &quot;Shiny world map representation&quot;, &quot;tags&quot;: [&quot;map&quot;], &quot;authors&quot;: [&quot;tercen&quot;], &quot;urls&quot;: [&quot;https://github.com/tercen/shiny_worldmap_docker_operator&quot;], &quot;container&quot;: &quot;agouy/worldmap:0.0.5&quot;, &quot;isWebApp&quot;: true } Pay attention to the two following lines: \"container\": \"agouy/worldmap:0.0.5\" is used to indicate the account, name and tag of the docker container, \"isWebApp\": true as we are handling a Shiny app. Build and push docker image If you do not already have one, create an account on Docker Hub. Install Docker on your machine: How to install Docker Login to Docker Hub using the docker login command and your credentials. [Refer to the docker login docs for a complete reference] docker login --username=YOURUSERNAME --password=YOURPASSWORD Build your image with the docker build command (with ACCOUNT your account name, REPO your image name and TAG your tag) docker build -t $ACCOUNT/$REPO:$TAG . Finally, push the image to your hub. sudo docker push $ACCOUNT/$REPO:$TAG Running docker operators locally If you wish to test your docker operator in your local Tercen, you require to activate the docker capability in Tercen Studio by changing the docker-compose.yaml file of your Tercen Studio setup. Please check the docker-compose.yaml file, it is found in main installation folder of Tercen Studio. The steps to modify the file are: First stop the dockers: docker-compose down Edit the docker-compose.yaml file, read the comments within the file, there a set of lines which require to be uncommented. The are by default commented out: # environment: # - tercen.log.level=&quot;0&quot; # needed for docker operators, 172.17.0.1 is the default docker gateway # - tercen.public.client.uri=http://172.17.0.1:5402 # - tercen.worker.public.ip=172.17.0.1 The above is an example to activate on an Ubuntu system, the settings may differ for windows, please check with support@tercen.com. After you have saved the file, then start the dockers. docker-compose up -d These modification allow Tercen Studio to run operators which are using dockers. Integrating any code (e.g. C++) If your algorithm code is not in R. Then consider the following example, it highlights an operator which is written in C++ called atsne or approximate tsne. It is implemented in Tercen using two concepts, one an operator and one a docker. an atsne_operator an atsne_docker The atsne_operator calls the C++ code implemented in the atsne_docker. Please check out the repository (click on links above) and see how this it was configured. "],["naming.html", "Chapter 13 Naming guidelines Operator naming guidelines", " Chapter 13 Naming guidelines The art of naming is fundamental to programming and here are some guidelines to help Operator naming guidelines Here are some examples of naming operators median_operator som_flowsom_operator , here the som is from the R package flowsom boxplot_shiny_operator, it is using R shiny worldmap_shiny_docker_operator, it is using R shiny and docker These examples follow naming guidelines, the recommended structure of an operator name is: function_package_shiny_docker_operator It is essentially a list of parts separated by an underscore. Where function and operator is always indicated and the rest depends on the operator context. A breakdown of the different parts are: function is the function name, usually from R function name package is the package or module name shiny is if the operator is uses R shiny docker is if the operator uses a docker operator is if is an operator Please make sure the git repository description outlines a brief functional description of the operator. e.g. calculates a median "],["tercen-app-library.html", "Chapter 14 Tercen app library", " Chapter 14 Tercen app library The Tercen app library is managed by a json file. Currently Tercen support is the only authorized to modify it. Anyone can request an app be added to the Tercen app library. Here are the steps for adding it to Tercen app library: Notify Tercen support (support@tercen.om) regarding your wish to add it to app-library Tercen support tests the app Tercen support modifies the app-library repository (publish) Tercen support send email to indicate it is available "],["known-issues.html", "Chapter 15 Known issues", " Chapter 15 Known issues Here is a list of known tercen_studio issues. on Windows it is necessary to have sufficient memory to run tercen studio "],["next-steps.html", "Chapter 16 Next steps", " Chapter 16 Next steps Here are some ideas: Try to code for different operators using the teRcen R package, Note when using R Studio it will auto-complete when you type the methods on the Tercen client and tercen query object. Give feedback on this app builders guide by creating an issue Read the online Tercen Book Give feedback on Tercen by sending an email to support@tercen.com Contact us for a one-2-one session "],["glossary.html", "Chapter 17 Glossary", " Chapter 17 Glossary Measurement: A numerical variable Observation: An observation is the factor name given to a value (measurement), at a particular moment in time, of a particular variable. Variable: A variable is a characteristic of a unit being observed that may assume more than one of a set of values to which a numerical measure or a category from a classification can be assigned (e.g. income, age, weight, etc., and occupation, industry, disease, etc. Cross-tab window: A Tercen interface window to define a projection view (i.e. what is on the: row, col, y-axis, x-axis, color, label). Projection: A projection is defined using the cross-tab window. Long format: A format where every row is a measurement. Wide format: A format where every column is a variable. App: A plug-in to Tercen. It can be an operator, step, workflow app, or workflow. App library: A repository of Tercen apps. There are many repository locations, (e.g. github, team library). Workflow: A sequence of steps or apps to achieve an analysis pipeline. Workflow app: A small workflow composed of steps, visuals and operators. Typically it achieves one task, e.g. PCA app. The PCA app is composed of one result visual and one computation and one data wrangling step. Step: A single step allows for a visual projection and optionally a computation using an operator. Operator: An operator computes on data supplied to it by the projection view defined using the cross-tab window. "],["appendix.html", "Chapter 18 Appendix Updating tercen-studio Uninstallation of tercen-studio Building tercen-studio", " Chapter 18 Appendix Updating tercen-studio You can update tercen-studio by running: # stop tercen_studio docker-compose down # get tercen_studio latest version git pull docker-compose pull # start tercen_studio docker-compose up -d Uninstallation of tercen-studio To uninstall tercen-studio, you need to run: docker-compose down # check tercen docker volumes names docker volume ls # delete tercen docker volumes docker volume rm tercen_studio_couchdb-data docker volume rm tercen_studio_tercen-data docker volume rm tercen_studio_tercen-studio-data docker volume rm tercen_studio_tercen-studio-renv Building tercen-studio If you need to build tercen-studio, run the following code: cd docker docker build -t tercen/tercen_studio:0.9.2.9 . docker history --no-trunc tercen_studio:0.9.2.9 docker push tercen/tercen_studio:0.9.2.9 "]]

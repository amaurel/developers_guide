{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>hey</p> <p>This guide outlines how to design, develop and share modules for Tercen.</p> <p>Tercen  promotes collaboration for data analysis. Not everyone can code or even  wants to,  but everyone should benefit from the explosion of data and code  currently taking place.</p> <p>Tercen allows non programmers (e.g. biologists) to explore their data and  programmers (e.g. bioinformaticians) to upload their code (or web-apps)  for the biologist to use. By offering this services we believe biologist get  empowered and can claim back control of their data. The bioinformatician gets  liberated from the operational details and  day to day analysis demands from  the biologist. This is summed up with the phrase:</p> <p>Tercen empowers the biologist and liberates the bioinformatician.</p>"},{"location":"appendix_glossary/","title":"Glossary","text":"<p>App: A small workflow composed of steps, visuals and operators. Typically it  achieves one task, e.g. PCA app. The PCA app is composed of one result visual  and one computation and one data wrangling step.</p> <p>Cross-tab view: A Tercen interface window to define a projection view (i.e. what is on the:  row, col, y-axis, x-axis, color, label).</p> <p>Library: A repository of Tercen modules.</p> <p>Long format: A format where every row is a measurement.</p> <p>Measurement: A numerical variable</p> <p>Module: A plug-in to Tercen. It can be an operator, app, or template. </p> <p>Observation: An observation is the factor name given to a value (measurement),  at a particular moment in time, of a particular variable.</p> <p>Operator: An operator computes on data supplied to it by the projection view defined using the cross-tab window.</p> <p>Projection: A projection is defined using the cross-tab window.</p> <p>Step: A single step allows for a visual projection and optionally a  computation using an operator.</p> <p>Template: A templatised workflow.</p> <p>Variable: A variable is a characteristic of a unit being observed that may  assume more than one of a set of values to which a numerical measure or a  category from a classification can be assigned (e.g. income, age, weight, etc.,  and \u201coccupation\u201d, \u201cindustry\u201d, \u201cdisease\u201d, etc.</p> <p>Wide format: A format where every column is a variable.</p> <p>Workflow: A sequence of steps or apps to achieve an analysis pipeline.</p>"},{"location":"appendix_organisation-setup/","title":"Organisation setup","text":"<p>If you wish to develop your own Tercen modules, an initial setup is required</p>"},{"location":"appendix_organisation-setup/#1-create-a-docker-hub-organisation","title":"1. Create a Docker Hub organisation","text":"<ul> <li>Operators are Docker images.</li> <li>The images are built and pushed to Docker Hub through a GitHub Action after each commit and/or tag.</li> <li>When the operator is installed in Tercen, the image is pulled from Docker Hub.</li> <li>If you don't already have one, you need to set up an organisation account on Docker Hub: https://hub.docker.com/ </li> </ul>"},{"location":"appendix_organisation-setup/#2-choose-a-tercen-instance-to-run-unit-tests","title":"2. Choose a Tercen instance to run unit tests","text":"<ul> <li>Regression testing is used for the development process of Tercen modules.</li> <li>Those tests consist in Tercen workflows that can be run on a Tercen instance. This instance needs to be specified and a Tercen \"test user\" needs to be created. This user will be used to run the tests from the GitHub Action.</li> <li>Choose an instance that will be used to run the test. It could be your development instance for example. You will need to use the service URI (e.g. https://tercen.com) in the next step.</li> <li>Create a test user. You will need its name and password in the next step.</li> </ul>"},{"location":"appendix_organisation-setup/#3-set-up-your-github-organisation","title":"3. Set up your GitHub organisation","text":"<ul> <li>We assume you already have a GitHub organisation in place</li> <li>You need to add the GH secrets<ul> <li>DOCKERHUB_ORG, DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD</li> <li>TERCEN_TEST_USERNAME and TERCEN_TEST_PASSWORD</li> <li>TERCEN_TEST_URI</li> <li>GITHUB_PAT</li> </ul> </li> <li>Template and GH Actions<ul> <li>Create a template GitHub repository on your own organisation, based on the Tercen one</li> <li>Edit the GitHub workflow files to replace the secrets by your own organisation secrets you just set up</li> </ul> </li> </ul>"},{"location":"appendix_organisation-setup/#4-tercen-instance-configuration","title":"4. Tercen instance configuration","text":"<p>If you are using your own Tercen instance, you need to modify the Tercen config file and add your GitHub organisation to the \"trusted git\" list.</p> <pre><code>tercen.allow.untrusted.git: 'false'\ntercen.allow.untrusted.docker: 'false'\ntercen.trusted.git:\n  - 'https://github.com/tercen/'\n  - 'https://github.com/YOUR_GITHUB_ORGANISATION/'\n</code></pre> <p>You also need to authorise the Docker Hub organisation.</p> <pre><code># accept any image name starting by tercen or my-trusted-dockerhub-org, ex. my-trusted-dockerhub-org/my-docker-image\ntercen.trusted.docker:\n  - 'tercen'\n  - 'my-trusted-dockerhub-org'\n</code></pre>"},{"location":"appendix_tercen-studio/","title":"Tercen Studio","text":""},{"location":"appendix_tercen-studio/#updating-tercen-studio","title":"Updating tercen-studio","text":"<p>You can update tercen-studio by running:</p> <pre><code># stop tercen_studio\ndocker-compose down        \n# get tercen_studio latest version           \ngit pull\ndocker-compose pull\n# start tercen_studio\ndocker-compose up -d\n</code></pre>"},{"location":"appendix_tercen-studio/#uninstallation-of-tercen-studio","title":"Uninstallation of tercen-studio","text":"<p>To uninstall tercen-studio, you need to run:</p> <pre><code>docker-compose down\n\n# check tercen docker volumes names\ndocker volume ls\n\n# delete tercen docker volumes\ndocker volume rm tercen_studio_couchdb-data\ndocker volume rm tercen_studio_tercen-data\ndocker volume rm tercen_studio_tercen-studio-data\ndocker volume rm tercen_studio_tercen-studio-renv\n</code></pre>"},{"location":"appendix_tercen-studio/#building-tercen-studio","title":"Building tercen-studio","text":"<p>If you need to build tercen-studio, run the following code:</p> <pre><code>cd docker\ndocker build -t tercen/tercen_studio:0.9.2.9 .\ndocker history --no-trunc tercen_studio:0.9.2.9\ndocker push tercen/tercen_studio:0.9.2.9\n</code></pre>"},{"location":"best-practices_guidelines/","title":"Development guidelines","text":""},{"location":"best-practices_guidelines/#operator-naming-convention","title":"Operator naming convention","text":"<p>The art of naming is fundamental to programming and here are some guidelines to help.</p> <p>Here are some examples of operator names:</p> <ul> <li><code>median_operator</code></li> <li><code>flowsom_operator</code> , here the <code>flowsom</code> is from the R package <code>flowsom</code></li> <li><code>boxplot_shiny_operator</code>, it is using R shiny</li> </ul> <p>These examples follow naming guidelines, the recommended structure of an operator name is:</p> <p><code>FUNCTION_TYPE_operator</code></p> <p>It is essentially a list of parts separated by an underscore.</p> <p>Where <code>FUNCTION</code> and <code>operator</code> is always indicated and the rest depends on the  operator context.</p>"},{"location":"best-practices_guidelines/#github-repository","title":"GitHub repository","text":"<p>Please make sure the git repository description outlines a brief functional  description of the operator. e.g. <code>calculates a median</code>.</p>"},{"location":"best-practices_using-tim/","title":"Using <code>tim</code>","text":"<p><code>tim</code> is an R package that includes utilities to facilitate operator development in Tercen Studio.</p>"},{"location":"best-practices_using-tim/#development-workflow-utilities","title":"Development workflow utilities","text":"<pre><code>tim::set_workflow_step_ids(data_step_url)\ntim::set_tercen_credentials()\n</code></pre>"},{"location":"best-practices_using-tim/#test-utilities","title":"Test utilities","text":"<p>Populate test data:</p> <pre><code>tim::build_test_data(out_table = out_table, ctx = ctx, test_name = \"test1\")\n</code></pre> <p>Check test data:</p> <pre><code>tim::check_test_local(out_table = out_table, test_name = \"test1\")\n</code></pre>"},{"location":"best-practices_using-tim/#operator-folder-utilities","title":"Operator folder utilities","text":"<p>Populate GitHub workflow files:</p> <pre><code>tim::populate_gh_workflow(type = \"R\")\ntim::populate_gh_workflow(type = \"docker\")\n</code></pre>"},{"location":"getting-started_core-concepts/","title":"Core concepts","text":""},{"location":"getting-started_core-concepts/#tercen-modules","title":"Tercen modules","text":"<p>There are three main types of Tercen modules:</p> <ul> <li>Templates</li> <li>Apps</li> <li>Operators</li> </ul> <p>A researcher wanting a complete workflow data analysis (e.g. RNA-seq, flow cyto, etc.) chooses one of the workflows expressed as a list of template. A  template therefore represents the highest level app because it defines a  set of many steps in sequence to achieve the complete analysis. There would be a template for each of the high-level workflow (e.g. RNA-seq, flow cyto, etc.).</p> <p>A researcher wanting a specific statistical process (e.g. quality control, two  group analysis, or enrichment analysis, etc.) chooses from a list of apps.  A app therefore represents the second highest level app because it defines a focused set of steps and visuals to achieve one particular statistical objective.</p> <p>A researcher wanting a specific operator function (e.g. scale, log, multiplication, addition and subtraction, etc.) chooses from a list of operators.  An operator therefore represents a single computational step. It is a  typically a single R or Python function.</p> <p>In summary a researcher wishing a full end-to-end workflow chooses a template,  a specific data process chooses a workflow, a specific computation chooses  an operator.</p> <p>Once a module is built, it may be added to the Library where it can be  accessed by researchers.</p> <p>Deciding on which to build is determined by what you would like the module to achieve. The first two, template and workflow, do not need programming experience,  the operator does. </p> <p>The building of each type of module is explained in the following chapters.</p>"},{"location":"getting-started_setup-tercen-studio/","title":"Setting up Tercen Studio","text":"<p>If you wish to develop operators then you need to set up a development environment.</p>"},{"location":"getting-started_setup-tercen-studio/#installing-tercen-studio","title":"Installing Tercen Studio","text":"<p>1. Install docker-compose</p> <p>First you need to install docker-compose. </p> <p>For Windows:</p> <p>If you use Windows, you can install Docker-Desktop for Windows that includes <code>docker-compose</code>.</p> <p>Advise: Select the WSL 2 backend system option when installing on Windows.</p> <p>For Mac and Linux:</p> <p>Check out how to install docker-compose on Mac or Linux.</p> <p>2. Clone tercen-studio repository</p> <p>Then, get tercen-studio by cloning the following repository:</p> <pre><code>git clone https://github.com/tercen/tercen_studio.git\ncd tercen_studio\n</code></pre> <p>You then need to create the <code>tercen</code> network by running the following command.</p> <pre><code>docker network create tercen\n</code></pre> <p>The latest instructions on how to install Tercen Studio can be found in the  README of the Tercen Studio GitHub repository.</p>"},{"location":"getting-started_setup-tercen-studio/#starting-tercen-studio","title":"Starting Tercen Studio","text":"<p>Once <code>docker-compose</code> is installed and the <code>tercen-studio</code> repository cloned, you can start tercen by running:</p> <pre><code>docker-compose up -d\n</code></pre> <p>You can run Tercen by going to http://127.0.0.1:5402.</p> <ul> <li> <p>Username: admin</p> </li> <li> <p>Password: admin</p> </li> </ul> <p>You can run RStudio by going to  http://127.0.0.1:8787/.</p> <ul> <li> <p>Username: rstudio</p> </li> <li> <p>Password: tercen</p> </li> </ul> <p>You can run VS Code by going to  http://127.0.0.1:8443/.</p> <ul> <li>Password: tercen</li> </ul> <p>Now you're all set!</p>"},{"location":"going-forward_next-steps/","title":"Next steps","text":"<p>Here are some ideas:</p> <ul> <li>Try to code for different operators using the <code>teRcen</code> R package, Note when  using R Studio it will auto-complete when you type the methods on the Tercen  client and tercen query object.</li> <li>Give feedback on this developer's guide by creating an issue</li> <li>Give feedback on Tercen by sending an email to <code>support@tercen.com</code></li> <li>Contact us for a one-2-one session</li> </ul>"},{"location":"intro_guidelines/","title":"Guidelines","text":"<p>We want developers to have a great experience building on the Tercen Platform.  We believe that building a vibrant developer ecosystem around Tercen benefits  everyone involved, and helps our mission to make data analysis accessible to a  wider community. </p> <p>We've written these guidelines for anyone using Tercen\u2019s products and services,  to show you how to use Tercen and our APIs, and to share best practices as we,  and you, continue to build new and exciting products and services.</p> <p>But, like everything in life, there have to be some rules of engagement which is why we\u2019ve drawn up these developer guidelines. Yes, they're written in legal  terms, to protect us and you, but we\u2019ve tried to ensure they are as simple as  possible. We want to point you towards opportunities rather than focusing on  what can\u2019t be done.</p> <p>These guidelines sit alongside, and are in addition to our  Terms of Service and  Privacy Policy so  please do make sure you\u2019ve read and understand these documents. If we feel you  are misusing our products or services, we reserve the right to withdraw access  to our products and services entirely.</p>"},{"location":"intro_guidelines/#legal-text","title":"Legal text","text":"<p>Before starting work, we'll ask you to confirm that you're happy to comply with  the spirit and the letter of these guidelines.</p> <p>Please use Tercen\u2019s products and services responsibly. Our products, services  and our brand are really important to us, and we ask that you do not do anything  that might damage them.</p> <p>We expect data produced with Tercen\u2019s products to be represented transparently  and honestly. Don\u2019t misrepresent data or metrics created by our products. We expect you to use our products and services to help serve your customers.  Don't re-sell, re-purpose or license, any data obtained from Tercen. Don\u2019t use  our products to create a service that competes with Tercen or infringes our  copyright. Keeping our customers' data secure is the most important thing that  Tercen does. Don\u2019t use spiders, robots crawlers, data mining or similar tools  to scrape the Tercen Website or APIs.</p> <p>Tercen needs access to monitor your access to our API so don\u2019t block us from  doing so. Respect our rate-limits. Don\u2019t overuse our APIs or resources \u2013 we  expect you to comply with any fair usage guidelines we publish from time to time. If you have an idea as to how our products can be improved or you would like  to try something experimental then please let us know and we'd be happy to  discuss with you.</p> <p>You can use our logo and branding where you have the right to do so, but please  don\u2019t do anything that could damage our brand integrity or be misleading or  confusing to customers - that includes using our logo in any part of your logo,  using the Tercen name in your app name or anything else that could be considered  an abuse of our branding, logos or copyrighted materials.</p> <p>Treat your customers and their data responsibly. Keeping our customers' data secure is the most important thing that Tercen does. We go to considerable lengths to ensure that all data sent to Tercen is  handled securely.</p> <p>We expect others with access to our customers\u2019 data to treat it with the same  level of trust and responsibility. </p> <p>Our terms for developers include:</p> <ul> <li>You must have appropriate measures in place to protect any information you  receive from Tercen against unauthorized access, use, or disclosure.</li> <li>You must only use the data you need to build your product or service.</li> <li>You must have an end user agreement and a privacy policy in place with respect to each of your customers - and it must be compatible with Tercen\u2019s terms.</li> <li>You must ensure you're meeting all your legal obligations in terms of  applicable data protection and consumer protection; don\u2019t use Tercen\u2019s products  in connection with data you don\u2019t have permission to process.</li> <li>You must be able to meet the requirements of the European Union's General Data Protection Regulation (GDPR) for any data you process which falls within the  scope of the legislation and fulfill subject access requests as required. In  addition to breach notifications required under GDPR, you'll notify Tercen of  any personal data breaches within 72 hours of becoming aware of a breach.</li> <li>You must grant Tercen permission to audit your data processing activities.  This can include independently produced audit reports.</li> </ul> <p>As our developer platform and business evolves, so too will these guidelines.  We\u2019d love for you to get in touch if you\u2019ve any feedback or suggestions for how we can make them better.</p> <p>We know that occasionally things can go wrong and mistakes can be made. If at any time you are concerned that these guidelines may have been breached, please  do notify us as soon as you become aware. These guidelines may change over time, so do come back and check periodically.</p> <p>Thanks for reading this far - we\u2019re excited to see what you\u2019ll build! </p>"},{"location":"library/","title":"Tercen Library","text":""},{"location":"library/#description","title":"Description","text":"<p>A Tercen Library is a collection of operators, apps, templates and datasets shared across a team or an organisation.</p> <p>When you add a dataset, a step to a workflow, or an operator within a step, the Library window appears:</p> <p></p> <p>You can see the modules you can access from the Tercen public library or your organisational or personal library.</p>"},{"location":"library/#library-management","title":"Library management","text":"<p>Coming soon.</p>"},{"location":"library/#custom-library","title":"Custom library","text":""},{"location":"library/#creating-your-personal-library","title":"Creating your personal library","text":"<p>If you would like to create your own library:</p> <ul> <li>Create a team and give it a name (for example \"MyLibrary\")</li> <li>Go to Settings &gt; check the \"Library team\" box</li> </ul> <p>This</p>"},{"location":"library/#installing-a-module","title":"Installing a module","text":"<p>You can add any module or dataset to your library. To do so, you can clone your operator repository  in your library team: * Click on \"New project\" * Navigate to the \"From git\" tab * Fill in the name, url, tag and auth token if needed * Click on \"OK\"</p> <p>The module will be installed and be available next time you open the library component.</p>"},{"location":"operator-dev_ci/","title":"Continuous Integration Workflow","text":""},{"location":"operator-dev_ci/#general-idea","title":"General idea","text":"<ul> <li>Everytime you push a new commit, a GitHub Workflow will be triggered.</li> <li>This workflow will build and push the Docker image containing the operator code and its execution environment .</li> <li>This workflow is specified in a YAML file you can find in the <code>/.github/workflows</code> directory.</li> <li>In this chapter, we will explain each section of the <code>/.github/workflows/ci.yaml</code> step-by-step to clarify its purpose and functionality.</li> </ul>"},{"location":"operator-dev_ci/#1-workflow-name-and-trigger","title":"1. Workflow Name and Trigger","text":"<pre><code>name: CI Workflow\n\non:\n  push:\n    branches: ['main']\n</code></pre> <p>The workflow is named CI Workflow, which is mainly for identification purposes within the GitHub Actions dashboard. The workflow is triggered by a <code>push</code> event, but only for the <code>main</code> branch. This means that every time code is pushed to the <code>main</code> branch of the repository, this workflow will automatically run.</p>"},{"location":"operator-dev_ci/#2-environment-variables","title":"2. Environment Variables","text":"<pre><code>env:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n</code></pre> <p>Two environment variables are defined here:</p> <ul> <li> <p>REGISTRY: This is set to <code>ghcr.io</code>, which stands for GitHub Container Registry. It is the domain where the Docker images will be stored.</p> </li> <li> <p>IMAGE_NAME: This variable is dynamically set to the name of the GitHub repository using <code>github.repository</code>. The <code>${{ github.repository }}</code> syntax is GitHub's way of accessing context values, such as the repository name. </p> </li> </ul> <p>The image name will be used later when tagging the Docker image.</p>"},{"location":"operator-dev_ci/#3-job-definition-build-and-push-image","title":"3. Job Definition: <code>build-and-push-image</code>","text":"<p>The core of the workflow is defined within a single job called <code>build-and-push-image</code>.</p> <pre><code>jobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n      attestations: write\n      id-token: write\n</code></pre> <ul> <li> <p>runs-on: ubuntu-latest: The job will run on the latest available version of Ubuntu. This provides a virtual machine with all the necessary tools to run Docker and interact with GitHub.</p> </li> <li> <p>permissions: This section grants specific permissions to the job:</p> </li> <li><code>contents: read</code>: Allows reading the repository's contents (code, files).</li> <li><code>packages: write</code>: Allows publishing Docker images to GitHub Packages.</li> <li><code>attestations: write</code>: Grants access to manage attestations, which are metadata related to builds.</li> <li><code>id-token: write</code>: Allows the job to issue ID tokens for authentication, commonly used with OpenID Connect for secure token exchanges.</li> </ul>"},{"location":"operator-dev_ci/#4-steps-in-the-workflow","title":"4. Steps in the Workflow","text":"<p>This job consists of several steps, each performing a crucial task in the workflow.</p>"},{"location":"operator-dev_ci/#step-1-checkout-repository","title":"Step 1: Checkout Repository","text":"<pre><code>- name: Checkout repository\n  uses: actions/checkout@v4\n</code></pre> <p>The first step uses the <code>actions/checkout</code> action, version <code>v4</code>. This action checks out the repository code so that it can be accessed in the subsequent steps. Without this step, the job wouldn't be able to access the files in the repository.</p>"},{"location":"operator-dev_ci/#step-2-log-in-to-the-container-registry","title":"Step 2: Log in to the Container Registry","text":"<pre><code>- name: Log in to the Container registry\n  uses: docker/login-action@v3.3.0\n  with:\n    registry: ${{ env.REGISTRY }}\n    username: ${{ github.actor }}\n    password: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> <p>In this step, the workflow logs into GitHub's Container Registry (<code>ghcr.io</code>) using the <code>docker/login-action</code>. This action allows you to authenticate to a container registry, enabling the workflow to push Docker images.</p> <ul> <li>registry: Set to the value of <code>${{ env.REGISTRY }}</code> (<code>ghcr.io</code>).</li> <li>username: Set to <code>${{ github.actor }}</code>, which represents the username of the person or bot that triggered the workflow.</li> <li>password: Set to <code>${{ secrets.GITHUB_TOKEN }}</code>, a built-in secret provided by GitHub to authenticate the workflow. This token allows the workflow to access the repository's packages and perform the necessary actions.</li> </ul>"},{"location":"operator-dev_ci/#step-3-extract-docker-metadata-tags-and-labels","title":"Step 3: Extract Docker Metadata (Tags and Labels)","text":"<pre><code>- name: Extract metadata (tags, labels) for Docker\n  id: meta\n  uses: docker/metadata-action@v5.5.1\n  with:\n    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n</code></pre> <p>This step uses the <code>docker/metadata-action</code> to extract metadata (such as tags and labels) from the repository and build context. The extracted metadata will be used later when tagging the Docker image.</p> <ul> <li>id: meta: This assigns an identifier <code>meta</code> to the step, making its outputs accessible in later steps.</li> <li>images: This specifies the base name for the Docker image, which is constructed from the container registry and the repository name.</li> </ul> <p>The output from this step is crucial for correctly tagging and labeling the Docker image in the next step.</p>"},{"location":"operator-dev_ci/#step-4-build-and-push-docker-image","title":"Step 4: Build and Push Docker Image","text":"<pre><code>- name: Build and push Docker image\n  id: push\n  uses: docker/build-push-action@v6.7.0\n  with:\n    context: .\n    push: true\n    tags: ${{ steps.meta.outputs.tags }}\n    labels: ${{ steps.meta.outputs.labels }}\n</code></pre> <p>In this final step, the <code>docker/build-push-action</code> is used to:</p> <ol> <li>Build a Docker image using the repository's <code>Dockerfile</code>.</li> <li>Push the built image to the GitHub Container Registry.</li> </ol> <p>Key parameters in this step:</p> <ul> <li>context: Set to <code>.</code> (the current directory). This specifies the build context, meaning the files in the repository's root directory will be used for the Docker build.</li> <li>push: Set to <code>true</code>. This ensures the Docker image is automatically pushed to the registry after it is built.</li> <li>tags: The tags for the image, provided by the output of the <code>meta</code> step (<code>${{ steps.meta.outputs.tags }}</code>).</li> <li>labels: Additional labels for the image, also provided by the <code>meta</code> step (<code>${{ steps.meta.outputs.labels }}</code>).</li> </ul>"},{"location":"operator-dev_ci/#optional-personal-access-token","title":"Optional: Personal Access Token","text":"<pre><code># A PAT is needed for this action, GITHUB_TOKEN cannot get relevant permission \n# secrets: |\n#   github_pat=${{ secrets.GH_PAT }}\n</code></pre> <p>This is an optional comment explaining that if higher-level permissions are required, a Personal Access Token (PAT) should be used instead of the default <code>GITHUB_TOKEN</code>. This would be defined as a secret (<code>GH_PAT</code>).</p>"},{"location":"operator-dev_ci/#conclusion","title":"Conclusion","text":"<p>This CI pipeline builds and pushes Docker images to GitHub Container Registry every time changes are made to the <code>main</code> branch. The workflow:</p> <ol> <li>Checks out the repository.</li> <li>Logs into the container registry.</li> <li>Extracts metadata to tag and label the image.</li> <li>Builds and pushes the Docker image to the registry.</li> </ol> <p>By using GitHub Actions and Docker together, this workflow automates the process of containerizing code and storing it in a centralized registry, enabling future installation from Tercen.</p>"},{"location":"operator-dev_ci/#release-workflow","title":"Release Workflow","text":"<p>Once you are satisfied with your operator, you can release your operator by following the steps described below.</p>"},{"location":"operator-dev_ci/#1-edit-the-operatorjson-file","title":"1. Edit the operator.json file","text":"<p>You should first edit the container field of the operator.json file so that it matched the version number you would like to push (here, 0.0.1 for example).</p>"},{"location":"operator-dev_ci/#2-push-your-changes-and-tag-the-repository","title":"2. Push your changes and tag the repository","text":"<p>After pushing your latest commit, you can add the same version number as a tag from the command line as follows:</p> <pre><code>git tag 0.0.1\n</code></pre> <p>Then push it with this command:</p> <pre><code>git push --tags\n</code></pre>"},{"location":"operator-dev_ci/#3-wait-and-check-the-results-of-the-release-workflow","title":"3. Wait and check the results of the release workflow","text":"<p>The same way a workflow is triggered after each commit, tagging a repository will trigger another workflow, release.yaml. This workflow that will build and push the Docker image, tag it with the run the unit tests.  Once the workflow is run, you can verify it has been successful. If that is the case, you are now ready to install your operator in a Library.</p>"},{"location":"operator-dev_create/","title":"Walkthrough example: R operator","text":"<p>Here we will learn through a concrete example how to create an R operator for Tercen. Our goal is to create an operator performing a linear regression on our input data and returning the slope and intercept of the model.</p>"},{"location":"operator-dev_create/#designing-the-operator","title":"Designing the operator","text":"<p>The first step is to define our input projection and output relation. In Tercen, each operator shall take as input a table and return a table. Remember:</p> <p>\"Table in, table out!\"</p> <p>Here we want to perform the linear regression of the values projected on the y axis against the values projected on the x axis, per cell. In this example, we will output only the intercept and the slope of the model, per cell. The operator model can be seen as follow: </p> <p></p>"},{"location":"operator-dev_create/#setting-up-the-project","title":"Setting up the project","text":"<p>Make sure that <code>tercen-studio</code> is properly set up and that both <code>Tercen</code> and <code>RStudio</code> run locally (respectively on http://127.0.0.1:5402 and http://127.0.0.1:8787/). Otherwise, please refer to Chapter 2.</p> <p>1. Create a GitHub repository from a template</p> <p>Create a new GitHub repository with your own account based on the Tercen R operator template (https://github.com/tercen/templateR_operator). Click on the green button Use this template in the Tercen template repository.</p> <p></p> <p>Then you can create your own repository based on this template. Choose an explicit name (here, <code>lm_operator</code>).</p> <p>Now that the repository is initiated in your GitHub account, go back to RStudio Server (http://127.0.0.1:8787/). Create a new project by clicking on File &gt; New project &gt; Version control &gt; Git. </p> <p>You will be asked the URL of the repository (put the newly created one) and a name for the project. Now, your local project should include the skeleton:</p> <ul> <li> <p><code>main.R</code>: main operator script</p> </li> <li> <p><code>workspace.R</code>: local testing script</p> </li> <li> <p><code>operator.json</code>: operator metadata</p> </li> <li> <p><code>README_template.md</code>: operator documentation template</p> </li> <li> <p><code>doc</code> directory: includes a <code>dev_commands.md</code> file, which contains useful development command lines.</p> </li> </ul> <p>2. Set up the Tercen input projection</p> <p>In this example, We will use the khan dataset (available on https://github.com/tercen/khan_data). First, we start Tercen locally (http://127.0.0.1:5402) and set up a pairwise projection of the measurement in different tissues. The data step of interest should look as follow:</p> <p></p> <p>Note that the data step URL includes this pattern: <code>/w/WORKF+LOWID/ds/DATASTEPID</code>, where <code>WORKFLOWID</code> and <code>DATASTEPID</code> are unique workflow and data step identifiers, respectively. These identifiers will be used in the next step within RStudio to get data from this data step.</p>"},{"location":"operator-dev_create/#develop-the-operator-locally","title":"Develop the operator locally","text":"<p>Now that our RStudio project and Tercen projection are set up, we can code and test our operator locally as follow:</p> <ul> <li> <p>Open <code>workspace.R</code></p> </li> <li> <p>Replace the data step and workflow IDs taken from the Tercen data step URL in <code>workspace.R</code>:</p> </li> </ul> <pre><code>library(tercen)\nlibrary(dplyr)\n\noptions(\"tercen.workflowId\" = \"WORKFLOWID\")\noptions(\"tercen.stepId\"     = \"DATASTEPID\")\n</code></pre> <ul> <li>Code your operator. Here, we implement a function <code>do.lm()</code> that performs a linear regression on the input data frame and return the slope and intercept of the model.</li> </ul> <pre><code>do.lm &lt;- function(df) {\n  out &lt;- data.frame(\n    .ri = df$.ri[1],\n    .ci = df$.ci[1],\n    intercept = NaN,\n    slope = NaN\n  )\n\n  mod &lt;- lm(.y ~ .x, data = df)\n\n  out$intercept &lt;- mod$coefficients[1]\n  out$slope &lt;- mod$coefficients[2]\n\n  return(out)\n}\n\nctx &lt;- tercenCtx()  %&gt;%          # Get data from the data step\n  select(.x, .y, .ri, .ci) %&gt;%   # select variables of interest\n  group_by(.ri, .ci) %&gt;%         # group by row and column (\"per cell\")\n  do(do.lm(.)) %&gt;%               # do the linear model\n  ctx$addNamespace() %&gt;%         # add namespace\n  ctx$save()                     # push results back to Tercen using the API\n</code></pre> <ul> <li>Execute the code and check the results in Tercen</li> </ul> <p>Note that we recommend to implement the following sanity checks when creating an operator:</p> <ul> <li> <p>check the presence of expected inputs (here, x and y axes)</p> </li> <li> <p>use the <code>try()</code> function to test the main function implemented (here, <code>lm()</code>)</p> </li> </ul>"},{"location":"operator-dev_deploy/","title":"Deploying an R operator","text":"<p>Now that we have a working R operator for Tercen, we want to deploy it! We will now document, prepare tests and release our linear regression operator.</p>"},{"location":"operator-dev_deploy/#documenting-the-operator","title":"Documenting the operator","text":"<p>Edit the <code>README.md</code> to describe the operator design and usage. The documentation should contain:</p> <ul> <li> <p>A general description of the operator</p> </li> <li> <p>A description of the input projections</p> </li> <li> <p>A description of the output relations</p> </li> </ul> <p>For example, here is how the <code>lm</code> operator documentation looks:</p> <p>Description</p> <p>The <code>lm</code> operator performs a linear regression in Tercen.</p> <p>Usage</p> <p>Input projection| :--|:-- <code>y-axis</code>| measurement value <code>x-axis</code>| explanatory value</p> <p>Output relations| :--|:-- <code>intercept</code>| numeric, intercept of the linear regression, per cell <code>slope</code>| numeric, slope of the linear regression, per cell</p> <p>Details</p> <p>The <code>lm</code> operator performs a linear regression on each cell and returns the slope and intercept of the model.</p>"},{"location":"operator-dev_deploy/#deploy","title":"Deploy!","text":"<p>1. Copy the code to the main.R script</p> <p>Once you are confident enough that your operator is working after testing it locally, you can copy the code to the <code>main.R</code> file.</p> <p>Make sure not to include the <code>options()</code> calls that are only needed during the local development step:</p> <pre><code># The following lines shall not be included into main.R:\noptions(\"tercen.workflowId\" = \"wwww\")\noptions(\"tercen.stepId\"     = \"dddd\")\n\ngetOption(\"tercen.workflowId\")\ngetOption(\"tercen.stepId\")\n</code></pre> <p>2. Initiate renv</p> <p>The ability to run an operator with exactly the same packages you used when you developed is essential for reproducible science. In order to ensure reproducibility, you can associate packages and their versions to your operator by using the <code>init()</code> function of the <code>renv</code> package: </p> <pre><code>renv::init()\n</code></pre> <p>This will initiate a project-local environment with a private R library in the <code>renv</code> subdirectory.</p> <p>3. Push it to your GitHub repository</p> <p>Once everything is ready, you simply need to push all the modifications to the GitHub repository that you created before.</p> <p>If you want to install it directly from <code>Tercen</code>, you will need to create a release in GitHub.</p> <p>4. Notify community</p> <p>Currently, we ask you to send an email to support@tercen.com containing the description and link to the operators app git repository, Tercen support will manually test it and add it to the app-library and thus allowing others to access it. We are currently building an web entry point for researchers to browse all the apps offered by the community.</p>"},{"location":"operator-dev_docker/","title":"Creating a docker operator","text":"<p>Some R packages require additional system libraries that might not be installed  in the Tercen environment. We can install them locally, but a problem persists:</p> <p>How to tell Tercen to install these dependencies when installing an operator?</p> <p>A solution is to create a docker container with our environment. If you are  not familiar with Docker, it is highly recommended that you read the  Get started with Docker guide.</p>"},{"location":"operator-dev_docker/#create-the-r-operator-locally","title":"Create the R operator locally","text":"<p>As an example, we will use the worldmap Tercen operator.  It requires the R package <code>sf</code>, commonly used to plot maps. This package requires an external system dependency, <code>GDAL</code>, depending itself on <code>UDUNIT2</code>.</p> <p>You will not be able to install this R package if you don't have these dependencies installed on the system. To install the package in Tercen Studio,  we simply need to run this command in the terminal:</p> <p><pre><code>apt-get -y update &amp;&amp; apt-get install -y libudunits2-dev libgdal-dev\n</code></pre> Once the operator is running locally (see section [Running docker operators locally]), we can prepare the docker operator.</p>"},{"location":"operator-dev_docker/#create-the-docker-operator","title":"Create the docker operator","text":"<p>First, create a second GitHub repository that will hold the code used to build the image:</p> <ul> <li> <p>A template for a Shiny Docker operator can be found here: https://github.com/tercen/shiny_docker_operator</p> </li> <li> <p>The worldmap docker operator can be found here: https://github.com/tercen/shiny_worldmap_docker_operator</p> </li> </ul> <p>It contains different files:</p> <ul> <li> <p><code>Dockerfile</code>: instructions to build the Docker container </p> </li> <li> <p><code>README.md</code>: to document the operator</p> </li> <li> <p><code>operator.json</code>:</p> </li> <li> <p><code>start.R</code>: internal, should not be modified.</p> </li> </ul> <p>For the worldmap operator, the <code>Dockerfile</code> look like this:</p> <pre><code>FROM tercen/dartrusttidy:1.0.7\n\nUSER root\nWORKDIR /operator\n\nRUN apt-get update\nRUN apt-get install -y libudunits2-dev\nRUN apt-get update\nRUN apt-get install -y libgdal-dev\n\nRUN git clone https://github.com/tercen/shiny_worldmap_operator.git\n\nWORKDIR /operator/shiny_worldmap_operator\n\nRUN echo 0.0.5 &amp;&amp; git pull\nRUN git checkout 0.0.5\n\nRUN R -e \"renv::restore(confirm=FALSE)\"\n\nENV TERCEN_SERVICE_URI https://tercen.com\n\nCOPY start.R /start.R\n\nENTRYPOINT [ \"R\",\"--no-save\",\"--no-restore\",\"--no-environ\",\"--slave\",\"-f\",\"/start.R\"]\n</code></pre> <p>From the template, we need to:</p> <ul> <li> <p>indicate the git repository containing the R operator (here,  <code>https://github.com/tercen/shiny_worldmap_operator.git</code>)</p> </li> <li> <p>modify the working directory (<code>/operator/shiny_worldmap_operator</code>, based on the GitHub repository name)</p> </li> <li> <p>modify the tag (here, <code>0.0.5</code>)</p> </li> <li> <p>add the commands to install our dependencies:</p> </li> </ul> <pre><code>RUN apt-get update\nRUN apt-get install -y libudunits2-dev\nRUN apt-get update\nRUN apt-get install -y libgdal-dev\n</code></pre> <p>Finally, we need to modify the <code>operator.json</code> docker operator file.</p> <pre><code>{\n  \"name\": \"Worldmap\",\n  \"description\": \"Shiny world map representation\",\n  \"tags\": [\"map\"],\n  \"authors\": [\"tercen\"],\n  \"urls\": [\"https://github.com/tercen/shiny_worldmap_docker_operator\"],\n  \"container\": \"agouy/worldmap:0.0.5\",\n  \"isWebApp\": true\n}\n</code></pre> <p>Pay attention to the two following lines:</p> <ul> <li> <p><code>\"container\": \"agouy/worldmap:0.0.5\"</code> is used to indicate the account, name and tag of the docker container,</p> </li> <li> <p><code>\"isWebApp\": true</code> as we are handling a Shiny app.</p> </li> </ul>"},{"location":"operator-dev_docker/#build-and-push-docker-image","title":"Build and push docker image","text":"<ul> <li> <p>If you do not already have one, create an account on Docker Hub.</p> </li> <li> <p>Install Docker on your machine: How to install Docker</p> </li> <li> <p>Login to Docker Hub using the <code>docker login</code> command and your credentials.  [Refer to the docker login docs for a complete reference]</p> </li> </ul> <pre><code>docker login --username=YOURUSERNAME --password=YOURPASSWORD\n</code></pre> <ul> <li>Build your image with the <code>docker build</code> command (with ACCOUNT your account name, REPO your image name and TAG your tag)</li> </ul> <pre><code>docker build -t $ACCOUNT/$REPO:$TAG .\n</code></pre> <ul> <li>Finally, push the image to your hub.</li> </ul> <pre><code>sudo docker push $ACCOUNT/$REPO:$TAG\n</code></pre>"},{"location":"operator-dev_docker/#running-docker-operators-locally","title":"Running docker operators locally","text":"<p>If you wish to test your docker operator in your local Tercen, you require to activate the docker capability in Tercen Studio by changing the <code>docker-compose.yaml</code> file of your Tercen Studio setup.</p> <p>Please check the <code>docker-compose.yaml</code> file, it is found in main installation folder of Tercen Studio.</p> <p>The steps to modify the file are:</p> <p>First stop the dockers:</p> <p><code>docker-compose down</code></p> <p>Edit the <code>docker-compose.yaml</code> file, read the comments within the file, there a set of lines which require to be uncommented. The are by default commented out:</p> <pre><code>#    environment:\n#      - tercen.log.level=\"0\"\n# needed for docker operators, 172.17.0.1 is the default docker gateway\n#      - tercen.public.client.uri=http://172.17.0.1:5402\n#      - tercen.worker.public.ip=172.17.0.1\n</code></pre> <p>The above is an example to activate on an Ubuntu system, the settings may differ for windows, please check with <code>support@tercen.com</code>.</p> <p>After you have saved the file, then start the dockers.</p> <p><code>docker-compose up -d</code></p> <p>These modification allow Tercen Studio to run operators which are using dockers.</p>"},{"location":"operator-dev_docker/#integrating-any-code-eg-c","title":"Integrating any code (e.g. C++)","text":"<p>If your algorithm code is not in R. Then consider the following example, it highlights an operator which is written in C++ called <code>atsne</code> or approximate tsne.</p> <p>It is implemented in Tercen using two concepts, one an operator and one a docker.</p> <ul> <li>an atsne_operator</li> <li>an atsne_docker</li> </ul> <p>The <code>atsne_operator</code> calls the C++ code implemented in the <code>atsne_docker</code>.</p> <p>Please check out the repository (click on links above) and see how this it was configured.</p>"},{"location":"operator-dev_improve/","title":"Improving an operator","text":"<p>Now that we have deployed our R operator for Tercen, we can always improve it! In this chapter we will see how to catch errors, add input parameters (properties), and prepare testing for our linear regression operator.</p>"},{"location":"operator-dev_improve/#error-catching","title":"Error catching","text":"<p>1. Check the presence of input projection</p> <p>For the <code>lm_operator</code>, we can check if both x and y axes have been set in the projection, and return an error message to help the user. We can do that using the <code>try()</code> function.</p> <pre><code>ctx &lt;- tercenCtx()\n\nif(inherits(try(ctx$select(\".x\")), 'try-error')) stop(\"x axis is missing.\")\nif(inherits(try(ctx$select(\".y\")), 'try-error')) stop(\"y axis is missing.\")\n</code></pre> <p>2. Catch errors in key processes</p> <p>We can also use the <code>try()</code> function to catch potential errors in key processes of our operator. In our example, we can for example catch error occuring while running the <code>lm()</code> function. Then, we return coefficients only if the model ran successfully. Otherwise, <code>NaN</code> are returned.</p> <pre><code>do.lm &lt;- function(df) {\n  out &lt;- data.frame(\n    .ri = df$.ri[1],\n    .ci = df$.ci[1],\n    intercept = NaN,\n    slope = NaN\n  )\n  mod &lt;- try(lm(.y ~ .x, data = df))    # try-catch\n  if(!inherits(mod, 'try-error')) {     # get coefficients if lm ran succesfully\n    out$intercept &lt;- mod$coefficients[1]\n    out$slope &lt;- mod$coefficients[2]\n  }\n  return(out)\n}\n</code></pre>"},{"location":"operator-dev_improve/#adding-properties","title":"Adding properties","text":"<p>Tercen operators can take input parameters (called properties). They can be of different types (boolean, enumerated, numeric).</p> <p>As an example, let's see how to add a property to the <code>lm_operator</code>. We will add a parameter to decide whether to omit the intercept in the model or not.</p> <p>1. Modify the operator's JSON file to add properties.</p> <p>For each property, we have to set values to different attributes:</p> <ul> <li> <p><code>kind</code>: property kind (<code>BooleanProperty</code>, <code>DoubleProperty</code>, or <code>EnumeratedProperty</code>)</p> </li> <li> <p><code>name</code>: name that will be displayed in Tercen</p> </li> <li> <p><code>defaultValue</code>: default value taken by the property</p> </li> <li> <p><code>description</code>: description to be displayed in Tercen</p> </li> </ul> <p>In our case, the JSON file looks now like this:</p> <p><pre><code>{\n  \"name\": \"Linear regression\",\n  \"description\": \"Returns the intercept and slope of a linear regression in a cell\",\n  \"tags\": [\"linear model\"],\n  \"authors\": [\"tercen\"],\n  \"urls\": [\"https://github.com/agouy/lm_operator\"],\n  \"properties\": [\n  {\n    \"kind\": \"BooleanProperty\",\n    \"name\": \"intercept.omit\",\n    \"defaultValue\": false,\n    \"description\": \"A logical value indicating whether the intercept should be omitted in the model.\"\n  }\n  ]\n}\n</code></pre> 2. Use the property in the R code</p> <p>This property can be called in the R operator code as follows:</p> <pre><code>  intercept.omit &lt;- as.logical(ctx$op.value('intercept.omit'))\n  if(intercept.omit) {\n    mod &lt;- try(lm(.y ~ .x - 1, data = df))\n  } else {\n    mod &lt;- try(lm(.y ~ .x, data = df))\n  }\n</code></pre>"},{"location":"operator-dev_improve/#preparing-operator-testing","title":"Preparing operator testing","text":"<p>It's always good to prepare some tests that could be ran when a new version of Tercen is released.</p> <p>To include a test, you need to create a <code>test</code> subdirectory in your project directory. It must include:</p> <ul> <li> <p>a test input file</p> </li> <li> <p>an expected output file</p> </li> <li> <p>a <code>JSON</code> file containing information about the test</p> </li> </ul> <p>For example, a test for our <code>lm</code> operator can be created as follow:</p> <pre><code># Simulate tercen input based on the CO2 dataset \n# with an x and y-axis, rows and columns\ndata(CO2)\ndf &lt;- data.frame(.x = CO2$conc, .y = CO2$uptake, .ri = CO2$Plant, .ci = CO2$Treatment)\n\n# Run the do.lm() function created above to generate the expected output\nout &lt;- df %&gt;% select(.ci, .ri, .x, .y) %&gt;%\n  group_by(.ri, .ci) %&gt;%\n  do(do.lm(.))\n\n# write input and expected output in the test subdirectory\nwrite.csv(CO2, file=\"./test/CO2.csv\", row.names = FALSE, quote = FALSE)\nwrite.csv(out, file=\"./test/output.csv\", row.names = FALSE, quote = FALSE)\n</code></pre> <p>Now that we have our input and ouput files, we can create the <code>JSON</code> file that shall include the following information:</p> <pre><code>{\n  \"kind\": \"OperatorUnitTest\",\n  \"name\": \"testlm1\",\n  \"namespace\": \"test\",\n  \"inputDataUri\": \"CO2.csv\",\n  \"outputDataUri\": [\"output.csv\"],\n  \"columns\": [\"Treatment\"],\n  \"rows\": [\"Plant\"],\n  \"colors\": [],\n  \"labels\": [],\n  \"yAxis\": \"uptake\",\n  \"xAxis\": \"conc\"\n}\n</code></pre> <p>The <code>name</code> attribute is free. Input and output test files names must be assigned to the <code>inputDataUri</code> and <code>inputDataUri</code>, respectively. Variable names of the input file must be assigned to the <code>columns</code>, <code>rows</code>, <code>colors</code>, <code>labels</code>, <code>yAxis</code>, <code>xAxis</code> attributes. In our case,  <code>colors</code> and <code>labels</code> are left empty as they are not part of our input.</p>"},{"location":"operator-dev_installation/","title":"Installing an Operator","text":""},{"location":"operator-dev_installation/#tercen-libraries","title":"Tercen Libraries","text":"<p>Tercen allows you to organize and manage modules (operators, templates, apps) and datasets within libraries. There are two types of libraries:</p> <ol> <li>Tercen Library: A curated list of modules and datasets maintained by the Tercen team.</li> <li>Custom Libraries: Personal or team-shared libraries that you can create and manage.</li> </ol>"},{"location":"operator-dev_installation/#creating-a-custom-library","title":"Creating a Custom Library","text":"<p>To install an operator, you first need to create a custom library. In Tercen, a library is a specialized type of team, and resources within the library (operators, templates, apps) are treated as specialized projects. This structure allows you to manage the library's content and control access to your resources.</p> <p>Steps to Create a Custom Library:</p> <ol> <li>Create a Team: Go to your Tercen account and create a new team (e.g., \"MyLibrary\").</li> <li>Enable Library Team: Navigate to your team's settings and select the \"Library team\" option to designate this team as a library.</li> </ol>"},{"location":"operator-dev_installation/#installing-an-operator-in-a-custom-library","title":"Installing an Operator in a Custom Library","text":"<p>Once your custom library is set up, you can use Tercen's git integration to install operators:</p> <ol> <li>Go to your library (the team you created).</li> <li>Click on \"New Project\" and choose \"From Git.\"</li> <li>Fill in the required fields:<ul> <li>Name: The name of the operator.</li> <li>URL: The Git repository URL of the operator.</li> <li>Tag: The specific version or tag (optional).</li> <li>Auth Token: If required, provide an authentication token.</li> </ul> </li> </ol> <p>This process will clone the operator's repository into your custom library. It should now be available when you add an operator to a data step.</p>"},{"location":"operator-dev_intro/","title":"General workflow","text":"<p>Lets go through a general approach to create an R operator for Tercen.  A more detailed walk through (a tutorial) example is outlined in the next  chapter where a linear regression operator is built from scratch.</p> <p>Building an operator requires the following sequential steps: </p> <ul> <li>Design the operator</li> <li>Setup the github repository</li> <li>Setup the input projection</li> <li>Connecting to Tercen</li> <li>Testing </li> <li>Managing input parameters</li> <li>Managing R packages</li> <li>Deploy</li> </ul>"},{"location":"operator-dev_intro/#design-the-operator","title":"Design the operator","text":"<p>The first step is to define our input projection and output relation.  In Tercen, each operator shall take as input a table and return a table. Remember:</p> <p>\"Table in, table out!\"</p> <p>To understand the input table and the output table. The input table is defined  by the data input projection in Tercen and output table is what is computed  by the operator. The output table (also called the computed table) is  related to the input table by an output relation.  </p> <p>The input project is the projection in the data step which is used by  the operator. For example a projection is composed of the <code>y-axis</code>, <code>x-axis</code>, <code>row</code>, <code>col</code>, <code>color</code>, <code>label</code>. This input project determines what is the structure of the data which is given to the operator. An operator which computes  a simple <code>mean</code> would use a <code>y-axis</code>, <code>row</code>, <code>col</code> projection. This allows  the <code>mean</code> to be computed per cell. A linear regression operator like <code>lm</code> might use a projection with <code>y-axis</code>, <code>x-axis</code>, and <code>row</code>, <code>col</code>. This allows the <code>lm</code>  to be computed per cell. </p> <p>The output relation is the relation of the calculated output to the  input values. For example:</p> <ul> <li>Is the relation per Cell?</li> <li>Is the relation per Column?</li> <li>Is the relation per Row? </li> <li>Is the relation for All the data?</li> </ul> <p>Per Cell example : Let's say the operator used a projection with <code>row</code> and <code>col</code> and the operator calculates a <code>mean</code> which is computed for each cell (i.e. per row/col), this would be a per cell relationship.</p> <p>Per Column example: Let's say the operator used a project with <code>row</code> and <code>col</code> and the operator performed a clustering on the columns, this would be a column relationship.</p> <p>for All data example: Let's say the operator used a project with <code>row</code> and <code>col</code> and the operator calculated a total <code>mean</code> of all the data (i.e. across all rows and cols), this would be an all data relationship.</p> <p>Steps for designing the operator</p> <ul> <li>Understand the Tercen concepts</li> <li>Look at existing operators</li> <li>Decide what variables are needed for the input projection</li> <li>Decide what values need to be computed and which output relations have to be created</li> </ul>"},{"location":"operator-dev_intro/#set-up-a-github-project","title":"Set up a GitHub project","text":"<p>All operators currently are developed on GitHub. It is required to have a  GitHub account to develop an operator, as operator are implemented in a  GitHub repository.</p> <p>In order to get started, the easiest way is the use one of the GitHub repository templates we have prepared:</p> <ul> <li>minimal template for R operators</li> <li>template for R operators</li> <li>template for Shiny operators</li> <li>template for Docker operators</li> <li>template for Python operators</li> </ul> <p>Steps for starting with the operator repository</p> <ul> <li>Get a GitHub account</li> <li>Choose an operator name</li> <li>Create an operator repository on GitHub based on a template (see above)</li> <li>Clone the repo into the local RStudio contained in Tercen Studio</li> </ul>"},{"location":"operator-dev_intro/#setup-the-input-data","title":"Setup the input data","text":"<p>This can be done in your local environment or in a cloud instance of Tercen.</p> <ul> <li>Login to Tercen (either local or cloud)</li> <li>Prepare your data by defining a cross-tab projection using a data step.</li> <li>Note that the project in the data step has URL with this pattern: <code>/w/workflowId/ds/stepId</code>, where <code>workflowId</code> and <code>stepId</code> are unique workflow and data step identifiers, respectively. These identifiers will be used in the next step to get data from this data step.</li> </ul>"},{"location":"operator-dev_intro/#connecting-to-tercen","title":"Connecting to tercen","text":"<p>Once you have cloned the github operator project into your local RStudio and you  have setup the Tercen data projection, we can code and test our operator locally.</p> <p>If you wish to test with the local version of Tercen, then you do not require  to set the <code>tercen.service</code> system variable. </p> <ul> <li>Load some data up in the local instance of Tercen</li> <li>Each data step has a unique<code>workflowId</code> and a <code>stepId</code> combination.</li> </ul> <pre><code>options(\"tercen.workflowId\"= \"8a8845f6a5eeff27ce33fd382444de88\")\noptions(\"tercen.stepId\"= \"5191724b-3963-4e34-af58-7977cc61e5b1\")\n</code></pre> <p>Connecting to Tercen cloud</p> <p>Additional system variable are required in order to connect to a data step in  the Tercen cloud.</p> <pre><code>options(\"tercen.serviceUri\"= \"https://tercen.com/api/v1/\")\noptions(\"tercen.username\"= \"uuuu\")\noptions(\"tercen.password\"= \"pppp\")\n</code></pre> <p>Where <code>uuuu</code> is the username and <code>pppp</code> is the password, these are specific  to your username and password.</p>"},{"location":"operator-dev_intro/#managing-input-parameters","title":"Managing input parameters","text":"<p>The operator has a file called <code>operator.json</code> these define the parameters which the user can set when using your operator.</p> <p>Before deploying, please think what parameters are required and modify this file.</p>"},{"location":"operator-dev_intro/#managing-r-packages","title":"Managing R packages","text":"<p>The newly created operators requires the correct packages to be loaded. Install the packages your require using the standard install procedures, we recommend the following:</p> <ul> <li>install.packages()</li> <li>remotes::install_github()</li> </ul> <p>Just before you deploy your operator, it is necessary to setup the package  management system. A Tercen operator manages its packages using the <code>renv</code> system. The <code>renv</code> system allows all the packages you required to be recorded  in a <code>renv.lock</code> file.</p> <p>To generate this use:</p> <pre><code>renv::init() \n</code></pre> <p>This is done before you <code>push</code> the repository to github.</p>"},{"location":"operator-dev_intro/#deploy","title":"Deploy!","text":"<p>Once you are satisfied with your operator, you can release it.</p> <p>Document the operator</p> <p>Edit the <code>README.md</code> to describe the operator design and usage. The documentation should contain:</p> <ul> <li> <p>A general description of the operator</p> </li> <li> <p>A description of the input projections</p> </li> <li> <p>A description of the output relations</p> </li> </ul> <p>Prepare operator testing</p> <p>It's always good to prepare some unit tests that could be ran when a new version of Tercen is released.</p> <p>To include a test, you need to create a <code>tests</code> subdirectory in your project directory. It must include:</p> <ul> <li> <p>a test input file</p> </li> <li> <p>an expected output file</p> </li> <li> <p>a <code>JSON</code> file containing information about the test</p> </li> </ul> <p>Initiate package version control</p> <p>The ability to run an operator with exactly the same packages you used when you developed is essential for reproducible science. In order to ensure reproducibility, you can associate packages and their versions to your operator by initiating a project-local environment with a private libraries in a subdirectory.</p> <p>Push it to your GitHub repository</p> <p>Once everything is ready, you simply need to push all the modifications to the GitHub repository that you created before.</p> <p>It is possible that a more secure authentication is required by GitHub to push your changes the first time. One solution is to get a personal access token (PAT) from GitHub from https://github.com/settings/tokens. You can click on <code>Generate new token</code>, name it and select the <code>repo</code> scope. Be mindful of the expiration setting as well.</p> <p>Then, you can copy this token and paste it into RStudio after running the following command in the R console:</p> <pre><code>credentials::set_github_pat()\n</code></pre> <p>Note that the <code>credentials</code> package is installed by default in Tercen Studio.</p> <p>A good introduction to Git and RStudio is happygitwithr.</p> <p>Install the operator</p> <p>If you want to install it directly from <code>Tercen</code>, you will need to  create a release in GitHub. All the operators are version controlled.</p> <p>All operators who are on a git repository are installable,  only the git URL and a tag version number is required for a researcher to install it in Tercen.</p>"},{"location":"operator-dev_patterns/","title":"Common patterns","text":"<p>This section outlines common development patterns encountered while developing operators in Tercen.</p>"},{"location":"operator-dev_patterns/#output-data","title":"Output data","text":""},{"location":"operator-dev_patterns/#one-table","title":"One table","text":"<p>Example: Mean operator and  lm operator.</p>"},{"location":"operator-dev_patterns/#list-of-tables","title":"List of tables","text":"<p>Example: PCA operator.</p>"},{"location":"operator-dev_patterns/#serialised-r-object","title":"Serialised R object","text":"<p>Example: FlowSOM operator.</p>"},{"location":"operator-dev_patterns/#serialised-file","title":"Serialised file","text":"<p>Example: Barplot operator.</p>"},{"location":"operator-dev_patterns/#output-relations","title":"Output relations","text":""},{"location":"operator-dev_patterns/#per-cell","title":"Per Cell","text":"<p>Example: Mean operator, lm operator.</p>"},{"location":"operator-dev_patterns/#per-row-per-column","title":"Per Row / Per Column","text":"<p>There are two typical cases for creating a relation per row or per column only:</p> <ul> <li> <p>the output is computed per observation. This is the case of clustering  algorithms that assign each observation to a cluster ID.</p> </li> <li> <p>the is computed per variable. For example, we want to scale our values and  perform, this operation per variable or stratifying factor in our dataset.</p> </li> </ul> <p>Example: PCA operator.</p>"},{"location":"operator-dev_patterns/#no-relation","title":"No relation","text":"<p>This is useful when no relation needs to be made between computed values and existing data. For example, we can consider two cases where this is relevant:</p> <ul> <li>the operator computes an end result that cannot be linked to individual input data points</li> <li>the computation must be available to be linked to any data point (for example, when we want to generate a constant that can be used together with any other data)</li> </ul> <p>Example: Constant operator.</p>"},{"location":"operator-dev_patterns/#advanced-patterns","title":"Advanced patterns","text":"<p>Coming soon.</p>"},{"location":"operator-dev_python/","title":"Getting familiar with Tercen Studio","text":""},{"location":"operator-dev_python/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following prerequisites:</p> <ol> <li>Basic understanding of Python programming.</li> <li>Familiarity with Git and GitHub.</li> <li>Tercen Studio development environment installed. Follow the instructions in the Tercen Studio GitHub repository to set up the environment.</li> </ol>"},{"location":"operator-dev_python/#getting-started","title":"Getting started","text":""},{"location":"operator-dev_python/#step-1-set-up-a-development-data-step","title":"Step 1: Set Up a Development Data Step","text":"<ul> <li> <p>Go to Tercen local instance: http://127.0.0.1:5402/</p> </li> <li> <p>Create a project by clicking on New project</p> </li> <li> <p>Click on the From git tab and create a new project from <code>https://github.com/tercen/developers_guide_project</code> as follows: </p> </li> </ul> <p></p> <ul> <li> <p>This action will populate a new project that contains an example dataset (Crabs) and a small workflow to get started with development.</p> </li> <li> <p>Open the Dev workflow and double click on the  Dev data step to open the crosstab view.</p> </li> <li> <p>This a an input data projection we have prepared in the purpose of developing an operator to compute the mean value of the y axis factor, per cell (i.e., the data is grouped using row and column factors). You should see the following projection:</p> </li> </ul> <p></p>"},{"location":"operator-dev_python/#step-2-set-up-environment-and-install-core-requirements","title":"Step 2: Set Up Environment and Install Core Requirements","text":"<ul> <li> <p>Navigate to VS Code: http://127.0.0.1:8443/</p> </li> <li> <p>If you open it for the first time, you might be asked to install some VS Code extensions. Accept and install the Python extensions.</p> </li> <li> <p>Open a terminal in VS Code Server by clicking on the terminal icon in the lower left corner. Navigate to your cloned repository directory using the <code>cd</code> command. Install the core requirements by running the following command:</p> </li> </ul> <pre><code>pip3 install -r requirements.txt\n</code></pre>"},{"location":"operator-dev_python/#step-3-interact-with-data-through-the-api","title":"Step 3: Interact with data through the API","text":"<p>The first thing we'll do is to interactively work with the data we have projected in the crosstab.</p> <p>To do so, you can get from the data step URL the workflow ID and the data step ID. Open the <code>main.py</code> file  and paste the following code:</p> <pre><code>from tercen.client import context as ctx\nimport numpy as np\n\ntercenCtx = ctx.TercenContext(\n    workflowId=\"YOUR_WORKFLOW_ID\",\n    stepId=\"YOUR_STEP_ID\",\n    username=\"admin\", # if using the local Tercen instance\n    password=\"admin\", # if using the local Tercen instance\n    serviceUri=\"http://tercen:5400/\" # if using the local Tercen instance \n)\n</code></pre> <p>Execute this code (Shift + Enter) in the Python console after having replaced the workflow and step IDs.</p> <p>What does it do?</p> <p>Now that we have initialised the Tercen context, we can interact with the data step. Let's start by selecting some data:</p> <pre><code>tercenCtx.select(['.y'])\n</code></pre> <p>What does it do ?</p> <p><pre><code>tercenCtx.select(['.y', '.ci', '.ri'])\n</code></pre> What does it do ?</p> <p>You can check what is available in the Tables button in the crosstab. It contains the data that has been queried. You can look at it to get some inspiration. For example, we can identify the <code>.y</code>, <code>.ci</code> (column index) and <code>.ri</code> (row index) factors that we have queried above, but more are available.</p> <p>Now try to run the following lines of code:</p> <pre><code>tercenCtx.cselect()\ntercenCtx.rselect()\ntercenCtx.colors()\n</code></pre> <p>Now you can play around with the API and check the output of various functions. What do they do ?</p> <p>Here is a description of the most commonly used ones:</p> <ul> <li><code>select()</code>: select any factor specified in the arguments</li> <li><code>as.matrix()</code>: gets data from Tercen in a matrix format (rows x columns, y values being used to fill the matrix)</li> <li><code>cselect()</code>: select column factors</li> <li><code>rselect()</code>: select row factors</li> <li><code>cnames</code>: get column factor names</li> <li><code>rnames</code>: get row factor names</li> <li><code>colors</code>: get color factor names</li> <li><code>labels</code>: get label factor names</li> <li><code>addNamespace()</code>: add a unique namespace (defined in the data step environment within Tercen) to variable names</li> <li><code>save()</code>: send back an output table to Tercen</li> </ul> <p>We invite you to play around and test these different functions. They are mainly designed to retrieve data from Tercen, and send back output tables. In between, you are free to compute whatever you need.</p>"},{"location":"operator-dev_python/#developing-a-python-operator","title":"Developing a Python Operator","text":"<p>We will now see how we can develop a simple operator in Tercen. Building an operator requires to go through the following steps:</p> <ul> <li>Design the operator</li> <li>Setup the github repository</li> <li>Setup the input projection</li> <li>Connecting to Tercen</li> <li>Develop and test</li> <li>Manage input settings</li> <li>Manage dependencies</li> <li>Deployment</li> </ul>"},{"location":"operator-dev_python/#development-workflow","title":"Development Workflow","text":""},{"location":"operator-dev_python/#optional-step-1-create-a-new-git-repository","title":"[OPTIONAL] Step 1: Create a New Git Repository","text":"<p>Start by creating a new Git repository for your Python operator. You can use the template Python operator repository as a starting point. You can either fork the repository or create a new one based on the template.</p>"},{"location":"operator-dev_python/#step-2-open-vs-code-server","title":"Step 2: Open VS Code Server","text":"<p>Open your Tercen Studio development environment and access the VS Code Server by navigating to: <code>http://127.0.0.1:8443</code> in your web browser.</p>"},{"location":"operator-dev_python/#optional-step-3-clone-the-repository","title":"[OPTIONAL] Step 3: Clone the Repository","text":"<p>In VS Code Server, open the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>) and search for the \"Clone from GitHub\" command. Provide the URL of your newly created Git repository and choose a location to clone it into.</p> <p>If you were not able to create a GitHub repository, you can clone the template repository directly. You will be able to experiment with the API and follow this tutorial but you won't be able to push changes and install the operator.</p>"},{"location":"operator-dev_python/#step-4-set-up-environment-and-install-core-requirements","title":"Step 4: Set Up Environment and Install Core Requirements","text":"<p>Open a terminal in VS Code Server by clicking on the terminal icon in the lower left corner. Navigate to your cloned repository directory using the <code>cd</code> command. Install the core requirements by running the following command:</p> <pre><code>pip3 install -r requirements.txt\n</code></pre>"},{"location":"operator-dev_python/#step-5-develop-your-operator-with-a-real-life-example","title":"Step 5: Develop Your Operator with a Real-Life Example","text":"<p>Start developing your operator by creating a Python script in the cloned repository directory. Create a new Python script, for example, <code>main.py</code>, and paste the following code:</p> <pre><code>from tercen.client import context as ctx\nimport numpy as np\n\ntercenCtx = ctx.TercenContext()\n\n# Select relevant columns and create a pandas DataFrame\ndf = (\n    tercenCtx\n    .select(['.y', '.ci', '.ri'], df_lib=\"polars\")\n    .groupby(['.ci', '.ri'])\n    .mean()\n    .rename({\".y\": \"mean\"})\n)\n\n# Add namespace and save the computed mean per cell\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)\n</code></pre> <p>Let's break down the code step by step to understand its functionality:</p> <pre><code>from tercen.client import context as ctx\nimport numpy as np\n</code></pre> <p>This section of the code imports the necessary modules. <code>tercen.client.context</code> provides the Tercen context for interacting with the environment, while <code>numpy</code> is a popular library for numerical computations in Python.</p> <pre><code>tercenCtx = ctx.TercenContext()\n</code></pre> <p>Here, an instance of the <code>TercenContext</code> class is created. This context facilitates interaction with the Tercen environment, including data access and operations.</p> <pre><code>df = (\n    tercenCtx\n    .select(['.y', '.ci', '.ri'], df_lib=\"polars\")\n    .groupby(['.ci', '.ri'])\n    .mean()\n    .rename({\".y\": \"mean\"})\n)\n</code></pre> <p>This section performs a series of operations on the data:</p> <ol> <li> <p><code>.select(['.y', '.ci', '.ri'], df_lib=\"polars\")</code>: Selects columns '.y', '.ci', and '.ri' from the data. The <code>df_lib</code> parameter is set to \"polars,\" indicating that the data is treated as a Polars DataFrame.</p> </li> <li> <p><code>.groupby(['.ci', '.ri'])</code>: Groups the data by columns '.ci' (column index) and '.ri' (row index).</p> </li> <li> <p><code>.mean()</code>: Calculates the mean for the grouped data. This computes the mean value for each group.</p> </li> <li> <p><code>.rename({\".y\": \"mean\"})</code>: Renames the column named '.y' to \"mean\" to reflect that it contains the computed mean values.</p> </li> </ol> <p>The result is a Polars DataFrame named <code>df</code> containing the computed mean per cell.</p> <pre><code>df = tercenCtx.add_namespace(df)\n</code></pre> <p>This line adds a namespace to the DataFrame using <code>add_namespace</code>. This step ensures a unique and data step specific prefix is added to new factors to avoid duplicate factor names in a workflow.</p> <pre><code>tercenCtx.save(df)\n</code></pre> <p>Finally, the computed DataFrame is saved using the <code>save</code> method of the <code>TercenContext</code>. This action makes the calculated mean per cell available for use within the Tercen environment.</p>"},{"location":"operator-dev_python/#step-6-generate-requirements","title":"Step 6: Generate Requirements","text":"<p>If your operator requires additional Python packages, you can generate the requirements.txt file using the following command:</p> <pre><code>python3 -m tercen.util.requirements . &gt; requirements.txt\n</code></pre>"},{"location":"operator-dev_python/#optional-step-7-push-changes-to-github","title":"[OPTIONAL] Step 7: Push Changes to GitHub","text":"<p>Commit your changes to your local Git repository and push the changes to GitHub. This will trigger the Continuous Integration (CI) GitHub workflow, which performs automated tests on your operator.</p>"},{"location":"operator-dev_python/#optional-step-8-tag-the-repository","title":"[OPTIONAL] Step 8: Tag the Repository","text":"<p>Once you are satisfied with your operator's development and testing, you can tag your repository. Tagging will trigger the Release GitHub workflow, which will create a release for your operator.</p>"},{"location":"operator-dev_python/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have successfully developed and deployed a Python operator for Tercen. By following these steps, you can create custom data processing operators to extend the functionality  of Tercen and streamline your data analysis workflows. Remember to consult the Tercen documentation for more  details and advanced features. Happy coding!</p>"},{"location":"operator-dev_shiny/","title":"Creating a shiny operator","text":"<p>It is easy to create a shiny operator. It is exactly like the creating a standard operator but it uses a the shiny framework.</p> <p>An example of a simple shiny is found at:</p> <p>https://github.com/tercen/heatmap_shiny_operator</p> <p>In Tercen, a shiny app can be in three modes, these modes reflect the three states of a shiny operator.</p> <ul> <li>show</li> <li>run</li> <li>showResult</li> </ul> <p>The first mode \"show\" is when the initial mode when an shiny operator is added to the cross-tab view.</p> <p>The second mode \"run\" is when the shiny has been executed.</p> <p>The third mode \"showResult\" is when the results of the an executed shiny is presented. For example, the result maybe a new graph based on a computation performed during the run. </p> <p>A good example of all three modes go to  https://github.com/tercen/shiny_operator2</p>"},{"location":"templates-apps_apps/","title":"Building an app","text":""},{"location":"templates-apps_apps/#the-app-concept","title":"The app concept","text":"<p>An app is perfect for users who wish tot have a focused module of analysis with multiple operators and views (e.g. PCA).</p> <p>The building of an app does not require any programming.</p>"},{"location":"templates-apps_apps/#creating-an-app","title":"Creating an app","text":"<p>Here is the full procedure to create an app:</p> <ul> <li>Create a workflow that you wish to convert to an app</li> <li>Select a generic dataset, preferable from the data designs</li> <li>Prepare the workflow and run it with the generic data</li> <li>Add a wizard step</li> <li>Open the wizard (important)</li> <li>Run the wizard, and answer the questions (factors and filters specification)</li> <li>Remove the input data (table step) and add an Input step and an Output step</li> <li>Open the wizard and fill in:<ul> <li>Namespace: appAbbrev</li> <li>App design:  appAbbrev.dataDesignName</li> </ul> </li> <li>Save the app to apps project within the team</li> </ul>"},{"location":"templates-apps_apps/#publishing-an-app","title":"Publishing an app","text":"<p>All apps who are on a git repository are installable, only the git URL and  a tag version number is required for a researcher to install it in Tercen.</p>"},{"location":"templates-apps_apps/#customising-the-app-for-different-instruments-or-data","title":"Customising the app for different instruments or data","text":"<ul> <li>Select an instrument specific pipeline</li> <li>Run the app development workflow with an instrument specific dataset</li> <li>Clone the app to the apps project of the team </li> <li>Run the app and answer questions with new factors and filters</li> <li>Click on the Publish button give name: appAbbrev.dataDesignName</li> <li>Edit the json file with a custom Description and factorName</li> </ul>"},{"location":"templates-apps_templates/","title":"Building a template","text":"<p>A template workflow is perfect for users who wish to reuse a workflow to perform  a complete analysis.</p> <p>The building of a template does not require any programming.</p> <p>The process for building a template is:</p> <ul> <li>Design the template</li> <li>Create a workflow in Tercen</li> <li>Test it on input data</li> <li>Create a template folder in the project</li> <li>Move the workflow into the template folder</li> <li>Download the template from the project</li> <li>Create a github and upload template</li> <li>Tag the github</li> </ul>"},{"location":"troubleshooting_ci/","title":"CI and Github Actions","text":""},{"location":"troubleshooting_ci/#test-not-found","title":"Test not found","text":"<p><code>operator.run.test.not.found</code></p>"},{"location":"troubleshooting_ci/#wrong-relations","title":"Wrong relations","text":"<p><code>task.test.operator.bad.nRelations</code></p>"},{"location":"troubleshooting_ci/#wrong-ncols-nrows","title":"Wrong nCols / nRows","text":"<p><code>task.test.operator.bad.nCols</code> <code>task.test.operator.bad.nRows</code></p>"},{"location":"troubleshooting_ci/#wrong-column-names","title":"Wrong column names","text":"<p><code>task.test.operator.bad.column.names</code></p> <p>Maybe you've added or renamed a column in the latest version of the operator? In that case, the reference table should be updated accordingly.</p>"},{"location":"troubleshooting_ci/#wrong-column-type","title":"Wrong column type","text":"<p><code>task.test.operator.bad.column.type</code></p> <ul> <li>Check that .ri and .ci factors are output as integers in your operators.</li> <li>If another factor (for example, a cluster ID), tercen test will expect is to be a double. In that case, you need to provide a schema file. If you use tim to genenerate your test, you can use the XXX argument to the build_test_data  function.</li> </ul>"},{"location":"troubleshooting_ci/#wrong-values","title":"Wrong values","text":"<p><code>task.test.operator.bad.value</code></p> <p>This error occurs when a value value is different between the reference table and  the computed table. It gives you the row number and both values to help finding the issue.</p>"},{"location":"troubleshooting_ci/#wrong-correlation","title":"Wrong correlation","text":"<p><code>task.test.operator.bad.correlation</code></p>"},{"location":"troubleshooting_ci/#untrusted-git","title":"Untrusted git","text":"<p><code>tercen.forbidden.untrusted.git</code></p>"},{"location":"troubleshooting_common-issues/","title":"Common operator issues","text":"<p>Coming soon ...</p>"}]}